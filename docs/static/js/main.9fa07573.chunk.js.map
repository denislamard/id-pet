{"version":3,"sources":["pages/base.js","pages/main.js","pages/create.js","pages/find.js","pages/list.js","pages/change.js","pages/404.js","components/header.js","components/footer.js","components/title.js","pages/test.js","pages/test-formik.js","pages/test-call.js","App.js","utils/web3.js","serviceWorker.js","index.js"],"names":["BasePage","props","state","web3","account","contract","ipfs","Component","CardMenu","history","useHistory","handleClick","push","url","to","onClick","link","top","src","image","overlay","hover","alt","className","color","outline","action","MainPage","center","sm","ErrorMessage","fields","length","tag","variant","map","field","size","icon","xl","CreatePage","handleSelectPetType","value","console","log","setState","pettype","handlePetBirthdate","petbirthdate","handleTerms","terms","handlePhotoChange","file","saveToIpfsWithFilename","calculateAutofocus","a","redirect","firstname","lastname","email","petname","petcolor","photo_hash","handleSubmit","bind","handleChange","event","preventDefault","this","target","name","fileDetails","path","content","added_file_hash","add","added","cid","toString","error","far","onChange","label","type","group","middle","getValue","selected","disabled","valueDefault","emptyLabel","ref","fileupload","maxFileSize","allowedFileExtensions","containerHeight","maxHeight","errorMaxHeight","errorFileSize","errorFileExtension","id","autoFocus","FindPage","ListPage","ChangePage","NotFoundPage","Header","md","href","style","width","domElement","placement","fontSize","borderStyle","borderWidth","borderColor","rel","balance","fontWeight","Footer","fluid","backgroundColor","Date","getFullYear","Title","document","title","version","React","CallPage","self","methods","addPet","send","from","on","receipt","tokenId","events","AddToken","returnValues","_address","App","loadBlockchainData","ipfsClient","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Token","networks","instance","Contract","abi","address","utils","getBalance","fromWei","exact","component","big","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9fa07573.chunk.js","sourcesContent":["import {Component} from \"react\";\n\nexport class BasePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: props.web3, account: props.account, contract: props.contract, ipfs: props.ipfs};\n    }\n}\n","import React, {Fragment} from 'react';\nimport {BasePage} from './base';\nimport {useHistory} from \"react-router-dom\";\nimport {MDBBtn, MDBCard, MDBLink, MDBCardBody, MDBCardImage, MDBCardText, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\n\n\nfunction CardMenu(props) {\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(props.url);\n    }\n\n    return (\n        <MDBCard>\n            <MDBLink to='#' onClick={handleClick} link>\n                <MDBCardImage\n                    top\n                    src={props.image}\n                    overlay='white-slight'\n                    hover\n                    alt='MDBCard image cap'\n                />\n            </MDBLink>\n            <MDBCardBody>\n                <MDBCardText className={\"text-justify\"}>\n                    Some quick example text to build on the card title and make up the\n                    bulk of the card&apos;s content.\n                </MDBCardText>\n                <div className={\"text-center\"}>\n                    <MDBBtn color=\"primary\" onClick={handleClick} outline>{props.action}</MDBBtn>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\n\nclass MainPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <MDBContainer className={\"my-5\"}>\n                    <MDBRow center>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Create An ID\"} image={\"assets/m1.jpeg\"} url={\"/create\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Find a pet\"} image={\"assets/find-pet.jpg\"} url={\"/find\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center className={\"mt-5\"}>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"List all Ids\"} image={\"assets/m3.jpg\"} url={\"/list\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Change owner\"} image={\"assets/m4.jpg\"} url={\"/change\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default MainPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\nimport {Redirect} from 'react-router'\nimport {\n    MDBAlert,\n    MDBBtn,\n    MDBCol,\n    MDBContainer,\n    MDBDatePicker,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBSelect,\n    MDBSelectInput,\n    MDBSelectOption,\n    MDBSelectOptions,\n    MDBTypography\n} from \"mdbreact\";\nimport MDBFileupload from \"mdb-react-fileupload\";\n\n\n/*\n\nvar tifs = {1: 'Joe', 2: 'Jane'};\n...\n\nreturn (\n   <select id=\"tif\" name=\"tif\" onChange={this.handleChange}>\n      { Object.entries(tifs).map((t,k) => <option key={k} value={t[0]}>{t[1]}</option>) }\n   </select>\n)\n */\n\nconst ErrorMessage = (props) => {\n    const fields = props.fields;\n    return (\n        <div>\n            {fields.length > 0 &&\n            <MDBContainer className=\"mt-4\">\n                <MDBAlert color=\"danger\">\n                    <MDBTypography tag='h6' variant=\"h6\">Submitting failed</MDBTypography>\n                    {\n                        fields.map((field) =>\n                            <MDBRow>\n                                <MDBCol size=\"1\" className=\"ml-3\">\n                                    <MDBIcon icon=\"exclamation-triangle\" className=\"red-text\"/>\n                                </MDBCol>\n                                <MDBCol xl=\"10\" size=\"11\">\n                                    <p className=\"grey-text\"><span className=\"red-text\">{field}:</span> Please\n                                        complete\n                                        this field</p>\n                                </MDBCol>\n                            </MDBRow>\n                        )\n                    }\n                </MDBAlert>\n            </MDBContainer>\n            }\n        </div>\n    );\n}\n\nclass CreatePage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            redirect: false,\n            firstname: null,\n            lastname: null,\n            email: null,\n            petname: null,\n            petcolor: null,\n            pettype: null,\n            petbirthdate: null,\n            photo_hash: null,\n            terms: false,\n            fields: [],\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePetBirthdate = this.handlePetBirthdate.bind(this);\n        this.handleSelectPetType = this.handleSelectPetType.bind(this);\n        this.handlePhotoChange = this.handlePhotoChange.bind(this);\n        this.handleTerms = this.handleTerms.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        let fields = [];\n\n        if (this.state.firstname === null || this.state.firstname === \"\") {\n            fields.push(\"FirstName\");\n        }\n        if (this.state.lastname === null || this.state.lastname === \"\") {\n            fields.push(\"Lastname\");\n        }\n        if (this.state.email === null || this.state.email === \"\") {\n            fields.push(\"Email\");\n        }\n        if (this.state.petname === null || this.state.petname === \"\") {\n            fields.push(\"Name of your pet\");\n        }\n        if (this.state.petcolor === null || this.state.petcolor === \"\") {\n            fields.push(\"Color of your pet\");\n        }\n        if (this.state.pettype === null || this.state.pettype === \"\") {\n            fields.push(\"kind of your pet\");\n        }\n        if (this.state.petbirthdate === null || this.state.petbirthdate === \"\") {\n            fields.push(\"Birthdate of your pet\");\n        }\n        if (this.state.photo_hash === null || this.state.photo_hash === \"\") {\n            fields.push(\"Photo of your pet\");\n        }\n        if (this.state.terms === false) {\n            fields.push(\"Terms must be accepted\");\n        }\n\n        this.setState({fields: fields});\n        this.setState({redirect: fields.length === 0});\n    }\n\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSelectPetType = (value) => {\n        console.log(value);\n        this.setState({pettype: value[0]});\n    }\n\n    handlePetBirthdate = (value) => {\n        this.setState({petbirthdate: value});\n    }\n\n    handleTerms = (value) => {\n        this.setState({terms: value});\n    }\n\n    handlePhotoChange = (file) => {\n        this.saveToIpfsWithFilename(file);\n    }\n\n    async saveToIpfsWithFilename(file) {\n        try {\n            const fileDetails = {path: file.name, content: file, added_file_hash: null}\n            const added = await this.state.ipfs.add(fileDetails);\n            this.setState({photo_hash: added.cid.toString()});\n            console.log(added.cid.toString());\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    calculateAutofocus = (a) => {\n        if (this.state['formActivePanel' + a + 'Changed']) {\n            return true\n        }\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon far icon=\"edit\"/> Create an ID for\n                        your pet</h2>\n                    <form className=\"needs-validation\">\n                        <div className=\"indigo-text\">\n                            <h4 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"user\"/> Some information about You\n                            </h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"firstname\" onChange={this.handleChange} value={this.state.firstname}\n                                              label=\"Your firstname\" icon=\"user-edit\"\n                                              type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"lastname\" onChange={this.handleChange} value={this.state.lastname}\n                                              label=\"Your lastname\" icon=\"user-edit\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"email\" onChange={this.handleChange} value={this.state.email}\n                                              label=\"Your email\" icon=\"envelope\" group type=\"email\"/>\n                                </div>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"paw\"/> Information of your\n                                well loved pet</h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petname\" onChange={this.handleChange} value={this.state.petname}\n                                              label=\"Name\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petcolor\" onChange={this.handleChange} value={this.state.petcolor}\n                                              label=\"Color\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <MDBContainer>\n                                    <MDBRow middle>\n                                        <MDBCol sm=\"8\">\n                                            <div className={\"create-div\"}>\n                                                <MDBSelect label='Kind of pet' getValue={this.handleSelectPetType}>\n                                                    <MDBSelectInput selected=\"aaa\"/>\n                                                    <MDBSelectOptions>\n                                                        <MDBSelectOption disabled>Kind of your pet</MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'cat'}\n                                                                         value='cat' icon='assets/select-cat.jpg'>\n                                                            Cat\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'dog'}\n                                                                         value='dog' icon='assets/select-dog.jpg'>\n                                                            Dog\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'rabbit'}\n                                                                         value='rabbit' icon='assets/select-rabbit.jpg'>\n                                                            Rabbit\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'bird'}\n                                                                         value='bird' icon='assets/select-bird.jpg'>\n                                                            Bird\n                                                        </MDBSelectOption>\n                                                    </MDBSelectOptions>\n                                                </MDBSelect>\n                                            </div>\n                                        </MDBCol>\n                                        <MDBCol sm=\"4\">\n                                            <div className={\"create-div text-center\"}>\n                                                <MDBDatePicker valueDefault={null} emptyLabel=\"Birthdate of your pet\"\n                                                               value={this.state.petbirthdate}\n                                                               getValue={this.handlePetBirthdate}/>\n                                            </div>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </MDBContainer>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 mb-3 grey-text\"><MDBIcon icon=\"camera\"/> Add a Photo of\n                                your pet</h4>\n                            <div className={\"px-4\"}>\n                                <MDBFileupload\n                                    getValue={this.handlePhotoChange}\n                                    ref={fileupload => this.fileupload = fileupload}\n                                    maxFileSize=\"1M\"\n                                    allowedFileExtensions={['jpg', 'png', 'bmp']}\n                                    containerHeight={500}\n                                    maxHeight={500}\n                                    errorMaxHeight=\"Your photo must not have more than 500 pixels height\"\n                                    errorFileSize=\"The size of your photo is too big\"\n                                    errorFileExtension=\"The type of your photo is not allowed\"\n                                />\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"check\"/> Registration\n                                completed!</h4>\n                            <div className=\"px-4\">\n                                <p className=\"font-weight-bold mt-3 mb-1\"><strong>Terms and conditions</strong></p>\n                                <MDBInput name=\"terms\" value={this.state.firstname} getValue={this.handleTerms}\n                                          label=\"I agreee to the terms and conditions\" type=\"checkbox\" id=\"checkbox\"\n                                          autoFocus={this.calculateAutofocus(1)}/>\n                                <MDBInput label=\"I want to receive newsletter\" type=\"checkbox\" id=\"checkbox2\"/>\n                                <div className=\"text-right mt-2\">\n                                    <MDBBtn outline color=\"grey\">cancel</MDBBtn>\n                                    <MDBBtn outline color=\"success\" onClick={this.handleSubmit}>submit</MDBBtn>\n                                </div>\n                            </div>\n                            <ErrorMessage fields={this.state.fields}/>\n                        </div>\n                    </form>\n                </MDBContainer>\n            </Fragment>\n        )\n    }\n}\n\nexport default CreatePage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\nclass FindPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Find a Pet </h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default FindPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\n\n\nclass ListPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>list</h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default ListPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\nclass ChangePage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Change owner</h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default ChangePage;","import React, {Component, Fragment} from 'react';\n\nclass NotFoundPage extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>404 page not found</h1>\n            </Fragment>\n        );\n    }\n}\n\nexport default NotFoundPage;","import React from 'react';\nimport {MDBCol, MDBContainer, MDBRow, MDBTooltip} from \"mdbreact\";\n\nconst Header = (props) => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"4\">\n                    <a href={\"/\"}><img src=\"assets/pets.png\" className=\"pt-2\" alt=\"logo\" style={{width: '100%'}}/></a>\n                    <MDBTooltip domElement tag=\"p\"  placement=\"bottom\">\n                        <p className={\"text-center indigo-text align-middle p-1\"}\n                           style={{fontSize: \"0.85em\", borderStyle: \"solid\", borderWidth: \"thin\", borderColor: \"#bdbdbd\"}}>\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://goerli.etherscan.io/address/' + props.account}> <img src=\"assets/etherscan.png\"\n                                                                                                                                             alt=\"etherscan\"\n                                                                                                                                             style={{width: '16px'}}/> {props.account}\n                            </a>\n                        </p>\n                        <span>Balance: <b>{props.balance}</b> ether</span>\n                    </MDBTooltip>\n                </MDBCol>\n                <MDBCol md=\"8\">\n                    <h2 className=\"indigo-text text-center\" style={{fontSize: \"4em\", fontWeight: \"bolder\"}}>ID-PET  D-APPLICATION</h2>\n                    <p className=\"lead text-justify grey-text mt-4\">This is a simple example of a decentralized\n                        application based on unique non-fungible tokens on the Ethereum ERC721 blockchain.\n                        Its main goal is to identify pets on the Ethereum blockchain.\n                    </p>\n                </MDBCol>\n            </MDBRow>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <hr className=\"my-2\"/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport {MDBCol, MDBContainer, MDBFooter, MDBRow, MDBIcon} from \"mdbreact\";\n\nconst Footer = () => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <MDBFooter color=\"mdb-color darken-3\" className=\"font-small pt-3 mt-5\">\n                        <MDBContainer fluid className=\"text-center text-md-left\">\n                            <MDBRow>\n                                <MDBCol md=\"8\">\n                                    <h5 className=\"title\"><MDBIcon icon=\"paw\" /> Decentralized Application</h5>\n                                    <hr className=\"my-1\" style={{color:\"white\",backgroundColor:\"white\"}}/>\n                                    <p className={\"text-justify\"} style={{color: \"rgba(255,255,255,0.6)\"}}>\n                                        A decentralized application is a computer application that runs on a distributed computing system. DApps have been popularized by distributed ledger technologies (DLT) such as the Ethereum Blockchain, where DApps are often referred to as smart contracts.\n                                    </p>\n                                </MDBCol>\n                                <MDBCol md=\"4\" className={\"text-center\"}>\n                                    <img src=\"assets/pets.png\" className=\"pt-1\" alt=\"logo\" style={{width: '80%'}}/>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                        <div className=\"footer-copyright text-center py-2\">\n                            <MDBContainer fluid>\n                                &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.mdbootstrap.com\"> Denis LAMARD </a>\n                            </MDBContainer>\n                        </div>\n                    </MDBFooter>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default Footer;","import {Component} from 'react'\n\nexport class Title extends Component {\n\n    componentDidMount() {\n        document.title = this.props.name + ' version ' + this.props.version;\n    }\n\n    render() {\n        return null;\n    }\n}","import React, {Component} from 'react';\nimport {MDBContainer} from \"mdbreact\";\nimport MDBFileupload from 'mdb-react-fileupload';\n\nimport ipfsClient from 'ipfs-http-client'\n//const ipfsClient = require('ipfs-http-client')\n\nclass Test extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            added_file_hash: null,\n            selectedFile: null\n        }\n\n\n    }\n\n\n    handleFileuploadChange = file => {\n        this.setState({\n            selectedFile: file\n        })\n        console.log(this.state);\n        console.log(this.state.selectedFile.name);\n        console.log(this.fileupload);\n    }\n\n    onSubmitHandler = e => {\n        e.preventDefault();\n\n        this.saveToIpfsWithFilename(this.state.selectedFile);\n    }\n\n    // https://ipfs.io/ipfs/QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\n\n    //https://ipfs.infura.io:5001/api/v0/ Qmbxc9Lj1uCmWkLgM65vmCxgimTrU6y9KFQECqAUmqwtwT\n\n    //curl --output data.jpg -X POST \"https://ipfs.infura.io:5001/api/v0/get?arg=QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\"\n    //curl --output data.jpg -X POST \"https://ipfs.infura.io:5001/api/v0/cat?arg=QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\"\n\n    async saveToIpfsWithFilename(file) {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const fileDetails = {\n            path: file.name,\n            content: file,\n            added_file_hash: null\n        }\n        /*\n        const options = {\n            wrapWithDirectory: true,\n            progress: (prog) => console.log(`received: ${prog}`)\n        }\n        */\n        try {\n            const added = await ipfs.add(fileDetails);\n            this.setState({added_file_hash: added.cid.toString()})\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n\n    render() {\n        return (\n            <MDBContainer>\n                <p>{this.state.added_file_hash}</p>\n                <img src=\"https://ipfs.io/ipfs/QmPAgyxAieuT8ZGFBMayskEEL4CGgyx8QsymGPrc2S1FVm\"/>\n                <hr/>\n                <form>\n                    <MDBFileupload\n\n                        getValue={this.handleFileuploadChange}\n                        allowedFileExtensions={['jpg', 'png', 'bmp', 'jpeg']}\n                        containerHeight={500}\n                        maxFileSize=\"5M\"\n                        showSubmitButton\n                        onSubmitHandler={this.onSubmitHandler}\n                        ref={fileupload => this.fileupload = fileupload}\n                    />\n                </form>\n\n            </MDBContainer>\n        );\n    }\n};\n\nexport default Test;","import React from 'react';\nimport {Form, Formik} from 'formik';\nimport * as Yup from 'yup';\nimport {MDBContainer, MDBIcon, MDBInput} from \"mdbreact\";\n\nclass Test1 extends React.Component {\n    render() {\n        return (\n            <MDBContainer>\n                <Formik\n                    initialValues={{\n                        firstName: '',\n                        lastName: '',\n                        email: '',\n                        password: '',\n                        confirmPassword: ''\n                    }}\n                    validationSchema={Yup.object().shape({\n                        firstName: Yup.string()\n                            .required('First Name is required'),\n                        lastName: Yup.string()\n                            .required('Last Name is required'),\n                        email: Yup.string()\n                            .email('Email is invalid')\n                            .required('Email is required')\n                    })}\n                    onSubmit={fields => {\n                        alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\n                    }}\n                    render={({errors, status, touched}) => (\n                        <Form>\n\n\n                            <h4 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"user\"/> Some information about You\n                            </h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"firstname\"\n                                              label=\"Your firstname\" icon=\"user-edit\"\n                                              type=\"text\"\n                                    />\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"lastname\"\n                                              label=\"Your lastname\" icon=\"user-edit\" group\n                                              type=\"text\"\n                                    />\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"email\"\n                                              label=\"Your email\" icon=\"envelope\" group type=\"email\"\n\n                                    />\n                                </div>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                                <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                            </div>\n                        </Form>\n\n                    )}\n                />\n            </MDBContainer>\n        )\n    }\n}\n\nexport default Test1;","import React from 'react';\nimport {MDBContainer, MDBBtn, MDBIcon, MDBInput, MDBBadge} from \"mdbreact\";\nimport Token from \"../contracts/Token.json\";\nimport {BasePage} from \"./base\";\n\nclass CallPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            tokenId: null\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /*\n    listenAddToken = () => {\n    /*\n    listenAddToken = () => {\n        let self = this;\n        this.state.contract.events.AddToken().on(\"data\", async function (evt) {\n\n            if (evt.transactionHash !== self.state.transactionHash) {\n                console.log(\"Token ID=\", evt.returnValues.id);\n                self.setState({transactionHash: evt.transactionHash, tokenId: evt.returnValues.id});\n            }\n        });\n    }\n    */\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        let self = this;\n        const {account, contract} = this.state;\n\n        contract.methods.addPet(account).send({from: account})\n            .on('receipt', function (receipt) {\n                self.setState({tokenId: receipt.events.AddToken.returnValues.id});\n                //console.log(receipt.events.AddToken); //transactionHash\n            });\n    };\n\n    render() {\n        return (\n            <MDBContainer>\n                <p>{this.state.contract._address}</p>\n                <MDBBtn onClick={this.handleSubmit}>call</MDBBtn>\n                <div>\n                    {this.state.tokenId > 0 &&\n                        <MDBBadge color=\"success\">Token Id = {this.state.tokenId}</MDBBadge>\n                    }\n                </div>\n            </MDBContainer>\n        );\n    }\n\n}\n\nexport default CallPage;","import React, {Component, Fragment} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport MainPage from \"./pages/main\";\nimport CreatePage from \"./pages/create\";\nimport FindPage from \"./pages/find\";\nimport ListPage from \"./pages/list\";\nimport ChangePage from \"./pages/change\";\nimport NotFoundPage from \"./pages/404\";\nimport Header from './components/header';\nimport Footer from \"./components/footer\";\nimport {Title} from \"./components/title\";\n\nimport Test from \"./pages/test\";\nimport Test1 from \"./pages/test-formik\";\nimport CallPage from \"./pages/test-call\";\n\nimport {getWeb3} from \"./utils/web3\";\nimport './App.css';\nimport {MDBCol, MDBContainer, MDBRow, MDBSpinner} from \"mdbreact\";\nimport ipfsClient from \"ipfs-http-client\";\nimport Token from \"./contracts/Token.json\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: null, account: null, ipfs: null};\n    }\n\n    componentWillMount() {\n        this.loadBlockchainData()\n    }\n\n    async loadBlockchainData() {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Token.networks[networkId];\n        const instance = new web3.eth.Contract(Token.abi, deployedNetwork && deployedNetwork.address);\n\n        this.setState({\n            web3: web3,\n            account: accounts[0],\n            balance: web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether'),\n            contract: instance,\n            ipfs: ipfs\n        });\n    }\n\n    render() {\n        if (!this.state.web3) {\n            return (\n                <Fragment>\n                    <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                    <Header account={\"not available yet\"}/>\n                    <MDBContainer className={\"mt-5\"}>\n                        <MDBRow center>\n                            <MDBCol md=\"4\" className={\"text-center\"}>\n                                <img src=\"assets/metamask.png\" style={{width: '50%'}} alt={\"Metamask\"}/>\n                            </MDBCol>\n                            <MDBCol md=\"6\" className={\"text-center\"}>\n                                <h3>Loading data from Metamask...</h3>\n                                <MDBSpinner className={\"mt-4\"} big/>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </Fragment>\n            );\n        }\n        return (\n            <Fragment>\n                <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                <Header account={this.state.account} balance={this.state.balance}/>\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <MainPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/create\" exact>\n                            <CreatePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/find\" exact>\n                            <FindPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/list\" exact>\n                            <ListPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/change\" exact>\n                            <ChangePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/test\" exact>\n                            <CallPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"*\" component={NotFoundPage}/>\n                    </Switch>\n                </Router>\n                <Footer/>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}