{"version":3,"sources":["pages/base.js","pages/main.js","pages/create.js","pages/find.js","pages/list.js","pages/change.js","pages/404.js","components/header.js","components/footer.js","components/title.js","pages/test.js","App.js","utils/web3.js","serviceWorker.js","index.js"],"names":["BasePage","props","state","web3","account","ipfs","Component","CardMenu","history","useHistory","handleClick","push","url","to","onClick","link","top","src","image","overlay","hover","alt","className","color","outline","action","MainPage","center","sm","CreatePage","handleSelectPetType","value","setState","pettype","handlePetBirthdate","petbirthdate","handleTerms","terms","handlePhotoChange","file","saveToIpfsWithFilename","calculateAutofocus","a","formActivePanel1","formActivePanel1Changed","firstname","lastname","email","petname","petcolor","photo_hash","handleSubmit","bind","handleChange","event","console","log","target","name","this","alert","fileDetails","path","content","added_file_hash","add","added","cid","toString","error","far","icon","onChange","label","group","type","validate","success","middle","getValue","disabled","selected","valueDefault","emptyLabel","ref","fileupload","maxFileSize","allowedFileExtensions","containerHeight","maxHeight","errorMaxHeight","errorFileSize","errorFileExtension","id","autoFocus","FindPage","ListPage","ChangePage","NotFoundPage","Header","md","href","style","width","domElement","tag","placement","fontSize","borderStyle","borderWidth","borderColor","rel","balance","Footer","fluid","backgroundColor","Date","getFullYear","Title","document","title","version","Test","handleFileuploadChange","selectedFile","onSubmitHandler","e","preventDefault","ipfsClient","showSubmitButton","App","loadBlockchainData","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","eth","getAccounts","accounts","utils","getBalance","fromWei","exact","component","big","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9480b5d3.chunk.js","sourcesContent":["import {Component} from \"react\";\n\nexport class BasePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: props.web3, account: props.account, ipfs: props.ipfs};\n    }\n}\n","import React, {Fragment} from 'react';\nimport {BasePage} from './base';\nimport {useHistory} from \"react-router-dom\";\nimport {MDBBtn, MDBCard, MDBLink, MDBCardBody, MDBCardImage, MDBCardText, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\n\n\nfunction CardMenu(props) {\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(props.url);\n    }\n\n    return (\n        <MDBCard>\n            <MDBLink to='#' onClick={handleClick} link>\n                <MDBCardImage\n                    top\n                    src={props.image}\n                    overlay='white-slight'\n                    hover\n                    alt='MDBCard image cap'\n                />\n            </MDBLink>\n            <MDBCardBody>\n                <MDBCardText className={\"text-justify\"}>\n                    Some quick example text to build on the card title and make up the\n                    bulk of the card&apos;s content.\n                </MDBCardText>\n                <div className={\"text-center\"}>\n                    <MDBBtn color=\"primary\" onClick={handleClick} outline>{props.action}</MDBBtn>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\n\nclass MainPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <MDBContainer className={\"my-5\"}>\n                    <MDBRow center>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Create An ID\"} image={\"assets/m1.jpeg\"} url={\"/create\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Find a pet\"} image={\"assets/find-pet.jpg\"} url={\"/find\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center className={\"mt-5\"}>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"List all Ids\"} image={\"assets/m3.jpg\"} url={\"/list\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Change owner\"} image={\"assets/m4.jpg\"} url={\"/change\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default MainPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\nimport {MDBBtn, MDBCol, MDBContainer, MDBDatePicker, MDBIcon, MDBInput, MDBRow, MDBSelect, MDBSelectInput, MDBSelectOption, MDBSelectOptions} from \"mdbreact\";\nimport MDBFileupload from \"mdb-react-fileupload\";\n\nclass CreatePage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            formActivePanel1: 1,\n            formActivePanel1Changed: false,\n            firstname: null,\n            lastname: null,\n            email: null,\n            petname: null,\n            petcolor: null,\n            pettype: null,\n            petbirthdate: null,\n            photo_hash: null,\n            terms: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePetBirthdate = this.handlePetBirthdate.bind(this);\n        this.handleSelectPetType = this.handleSelectPetType.bind(this);\n        this.handlePhotoChange = this.handlePhotoChange.bind(this);\n        this.handleTerms = this.handleTerms.bind(this);\n    }\n\n    handleChange(event) {\n        console.log(event.target.name);\n        console.log(event.target.value);\n        console.log(event.target);\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSubmit() {\n        console.log(this.state);\n        alert('Form submitted!');\n    }\n\n    handleSelectPetType = (value) => {\n        this.setState({pettype: value[0]});\n    }\n\n    handlePetBirthdate = (value) => {\n        this.setState({petbirthdate: value});\n    }\n\n    handleTerms = (value) => {\n        this.setState({terms: value});\n    }\n\n    handlePhotoChange = (file) => {\n        this.saveToIpfsWithFilename(file);\n    }\n\n    async saveToIpfsWithFilename(file) {\n        try {\n            const fileDetails = {path: file.name, content: file, added_file_hash: null}\n            const added = await this.state.ipfs.add(fileDetails);\n            this.setState({photo_hash: added.cid.toString()});\n            console.log(added.cid.toString());\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    calculateAutofocus = (a) => {\n        if (this.state['formActivePanel' + a + 'Changed']) {\n            return true\n        }\n    }\n\n\n    render() {\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon far icon=\"edit\"/> Create an ID for your pet</h2>\n                    <div className=\"indigo-text\">\n                        <h4 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"user\"/> Some information about You</h4>\n                        <div className=\"px-4\">\n                            <div className={\"create-div\"}>\n                                <MDBInput name=\"firstname\" onChange={this.handleChange} value={this.state.firstname} label=\"Your firstname\" icon=\"user-edit\" group\n                                          type=\"text\" validate\n                                          error=\"wrong\"\n                                          success=\"right\"/>\n                            </div>\n                            <div className={\"create-div\"}>\n                                <MDBInput name=\"lastname\" onChange={this.handleChange} value={this.state.lastname} label=\"Your lastname\" icon=\"user-edit\" group\n                                          type=\"text\" validate\n                                          error=\"wrong\"\n                                          success=\"right\"/>\n                            </div>\n                            <div className={\"create-div\"}>\n                                <MDBInput name=\"email\" onChange={this.handleChange} value={this.state.email} label=\"Your email\" icon=\"envelope\" group type=\"email\"\n                                          validate\n                                          error=\"wrong\"\n                                          success=\"right\"/>\n                            </div>\n                        </div>\n                        <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"paw\"/> Information of your well loved pet</h4>\n                        <div className=\"px-4\">\n                            <div className={\"create-div\"}>\n                                <MDBInput name=\"petname\" onChange={this.handleChange} value={this.state.petname} label=\"Name\" icon=\"paw\" group type=\"text\" validate\n                                          error=\"wrong\"\n                                          success=\"right\"/>\n                            </div>\n                            <div className={\"create-div\"}>\n                                <MDBInput name=\"petcolor\" onChange={this.handleChange} value={this.state.petcolor} label=\"Color\" icon=\"paw\" group type=\"text\"\n                                          validate error=\"wrong\"\n                                          success=\"right\"/>\n                            </div>\n                            <MDBContainer>\n                                <MDBRow middle>\n                                    <MDBCol sm=\"8\">\n                                        <div className={\"create-div\"}>\n                                            <MDBSelect label='Kind of pet' getValue={this.handleSelectPetType}>\n                                                <MDBSelectInput/>\n                                                <MDBSelectOptions>\n                                                    <MDBSelectOption disabled>Kind of your pet</MDBSelectOption>\n                                                    <MDBSelectOption selected={this.state.pettype === 'cat'} value='cat' icon='assets/select-cat.jpg'>\n                                                        Cat\n                                                    </MDBSelectOption>\n                                                    <MDBSelectOption selected={this.state.pettype === 'dog'} value='dog' icon='assets/select-dog.jpg'>\n                                                        Dog\n                                                    </MDBSelectOption>\n                                                    <MDBSelectOption selected={this.state.pettype === 'rabbit'} value='rabbit' icon='assets/select-rabbit.jpg'>\n                                                        Rabbit\n                                                    </MDBSelectOption>\n                                                    <MDBSelectOption selected={this.state.pettype === 'bird'} value='bird' icon='assets/select-bird.jpg'>\n                                                        Bird\n                                                    </MDBSelectOption>\n                                                </MDBSelectOptions>\n                                            </MDBSelect>\n                                        </div>\n                                    </MDBCol>\n                                    <MDBCol sm=\"4\">\n                                        <div className={\"create-div text-center\"}>\n                                            <MDBDatePicker valueDefault={null} emptyLabel=\"Birthdate of your pet\" value={this.state.petbirthdate}\n                                                           getValue={this.handlePetBirthdate}/>\n                                        </div>\n                                    </MDBCol>\n                                </MDBRow>\n                            </MDBContainer>\n                        </div>\n                        <h4 className=\"font-weight-bold mt-5 mb-3 grey-text\"><MDBIcon icon=\"camera\"/> Add a Photo of your pet</h4>\n                        <div className={\"px-4\"}>\n                            <MDBFileupload\n                                getValue={this.handlePhotoChange}\n                                ref={fileupload => this.fileupload = fileupload}\n                                maxFileSize=\"1M\"\n                                allowedFileExtensions={['jpg', 'png', 'bmp']}\n                                containerHeight={500}\n                                maxHeight={500}\n                                errorMaxHeight=\"Your photo must not have more than 500 pixels height\"\n                                errorFileSize=\"The size of your photo is too big\"\n                                errorFileExtension=\"The type of your photo is not allowed\"\n                            />\n                        </div>\n                        <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"check\"/> Registration completed!</h4>\n                        <div className=\"px-4\">\n                            <p className=\"font-weight-bold mt-3 mb-1\"><strong>Terms and conditions</strong></p>\n                            <MDBInput name=\"terms\" value={this.state.firstname} getValue={this.handleTerms} label=\"I agreee to the terms and conditions\" type=\"checkbox\" id=\"checkbox\" autoFocus={this.calculateAutofocus(1)}/>\n                            <MDBInput label=\"I want to receive newsletter\" type=\"checkbox\" id=\"checkbox2\"/>\n                            <div className=\"text-right mt-2\">\n                                <MDBBtn outline color=\"grey\"\n                                        onClick={this.handleSubmit}>cancel</MDBBtn>\n                                <MDBBtn outline color=\"success\" disabled={this.state.photo_hash === null || this.state.terms === false}\n                                        onClick={this.handleSubmit}>submit</MDBBtn>\n                            </div>\n                        </div>\n                    </div>\n                </MDBContainer>\n            </Fragment>\n        )\n    }\n}\n\nexport default CreatePage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\nclass FindPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Find a Pet </h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default FindPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\n\n\nclass ListPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>list</h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default ListPage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\nclass ChangePage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Change owner</h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default ChangePage;","import React, {Component, Fragment} from 'react';\n\nclass NotFoundPage extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>404 page not found</h1>\n            </Fragment>\n        );\n    }\n}\n\nexport default NotFoundPage;","import React from 'react';\nimport {MDBCol, MDBContainer, MDBRow, MDBTooltip} from \"mdbreact\";\n\nconst Header = (props) => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"4\">\n                    <a href={\"/\"}><img src=\"assets/pets.png\" className=\"pt-2\" alt=\"logo\" style={{width: '100%'}}/></a>\n                    <MDBTooltip domElement tag=\"p\"  placement=\"bottom\">\n                        <p className={\"text-center indigo-text align-middle p-1\"}\n                           style={{fontSize: \"0.85em\", borderStyle: \"solid\", borderWidth: \"thin\", borderColor: \"#bdbdbd\"}}>\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://goerli.etherscan.io/address/' + props.account}> <img src=\"assets/etherscan.png\"\n                                                                                                                                             alt=\"etherscan\"\n                                                                                                                                             style={{width: '16px'}}/> {props.account}\n                            </a>\n                        </p>\n                        <span>Balance: <b>{props.balance}</b> ether</span>\n                    </MDBTooltip>\n                </MDBCol>\n                <MDBCol md=\"8\">\n                    <h2 className=\"h1 display-3 indigo-text\">ID-Pet DAPPlication</h2>\n                    <p className=\"lead text-justify grey-text\">This is a simple example of a decentralized\n                        application based on unique non-fungible tokens on the Ethereum ERC721 blockchain.\n                        Its main goal is to identify pets on the Ethereum blockchain.\n                    </p>\n                </MDBCol>\n            </MDBRow>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <hr className=\"my-2\"/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport {MDBCol, MDBContainer, MDBFooter, MDBRow, MDBIcon} from \"mdbreact\";\n\nconst Footer = () => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <MDBFooter color=\"mdb-color darken-3\" className=\"font-small pt-3 mt-5\">\n                        <MDBContainer fluid className=\"text-center text-md-left\">\n                            <MDBRow>\n                                <MDBCol md=\"8\">\n                                    <h5 className=\"title\"><MDBIcon icon=\"paw\" /> Decentralized Application</h5>\n                                    <hr className=\"my-1\" style={{color:\"white\",backgroundColor:\"white\"}}/>\n                                    <p className={\"text-justify\"} style={{color: \"rgba(255,255,255,0.6)\"}}>\n                                        A decentralized application is a computer application that runs on a distributed computing system. DApps have been popularized by distributed ledger technologies (DLT) such as the Ethereum Blockchain, where DApps are often referred to as smart contracts.\n                                    </p>\n                                </MDBCol>\n                                <MDBCol md=\"4\" className={\"text-center\"}>\n                                    <img src=\"assets/pets.png\" className=\"pt-1\" alt=\"logo\" style={{width: '80%'}}/>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                        <div className=\"footer-copyright text-center py-2\">\n                            <MDBContainer fluid>\n                                &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.mdbootstrap.com\"> Denis LAMARD </a>\n                            </MDBContainer>\n                        </div>\n                    </MDBFooter>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default Footer;","import {Component} from 'react'\n\nexport class Title extends Component {\n\n    componentDidMount() {\n        document.title = this.props.name + ' version ' + this.props.version;\n    }\n\n    render() {\n        return null;\n    }\n}","import React, {Component} from 'react';\nimport {MDBContainer} from \"mdbreact\";\nimport MDBFileupload from 'mdb-react-fileupload';\n\nimport ipfsClient from 'ipfs-http-client'\n//const ipfsClient = require('ipfs-http-client')\n\nclass Test extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            added_file_hash: null,\n            selectedFile: null\n        }\n\n\n    }\n\n\n    handleFileuploadChange = file => {\n        this.setState({\n            selectedFile: file\n        })\n        console.log(this.state);\n        console.log(this.state.selectedFile.name);\n        console.log(this.fileupload);\n    }\n\n    onSubmitHandler = e => {\n        e.preventDefault();\n\n        this.saveToIpfsWithFilename(this.state.selectedFile);\n    }\n\n    // https://ipfs.io/ipfs/QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\n\n    //https://ipfs.infura.io:5001/api/v0/ Qmbxc9Lj1uCmWkLgM65vmCxgimTrU6y9KFQECqAUmqwtwT\n\n    //curl --output data.jpg -X POST \"https://ipfs.infura.io:5001/api/v0/get?arg=QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\"\n    //curl --output data.jpg -X POST \"https://ipfs.infura.io:5001/api/v0/cat?arg=QmVehPSpyPyrP9gsYMc2LXBAxSyYoCADA14icjxcNKnXcH\"\n\n    async saveToIpfsWithFilename(file) {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const fileDetails = {\n            path: file.name,\n            content: file,\n            added_file_hash: null\n        }\n        /*\n        const options = {\n            wrapWithDirectory: true,\n            progress: (prog) => console.log(`received: ${prog}`)\n        }\n        */\n        try {\n            const added = await ipfs.add(fileDetails);\n            this.setState({added_file_hash: added.cid.toString()})\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n\n    render() {\n        return (\n            <MDBContainer>\n                <p>{this.state.added_file_hash}</p>\n                <img src=\"https://ipfs.io/ipfs/QmPAgyxAieuT8ZGFBMayskEEL4CGgyx8QsymGPrc2S1FVm\"/>\n                <hr/>\n                <form>\n                    <MDBFileupload\n\n                        getValue={this.handleFileuploadChange}\n                        allowedFileExtensions={['jpg', 'png', 'bmp', 'jpeg']}\n                        containerHeight={500}\n                        maxFileSize=\"5M\"\n                        showSubmitButton\n                        onSubmitHandler={this.onSubmitHandler}\n                        ref={fileupload => this.fileupload = fileupload}\n                    />\n                </form>\n\n            </MDBContainer>\n        );\n    }\n};\n\nexport default Test;","import React, {Component, Fragment} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport MainPage from \"./pages/main\";\nimport CreatePage from \"./pages/create\";\nimport FindPage from \"./pages/find\";\nimport ListPage from \"./pages/list\";\nimport ChangePage from \"./pages/change\";\nimport NotFoundPage from \"./pages/404\";\nimport Header from './components/header';\nimport Footer from \"./components/footer\";\nimport {Title} from \"./components/title\";\nimport Test from \"./pages/test\";\nimport {getWeb3} from \"./utils/web3\";\nimport './App.css';\nimport {MDBCol, MDBContainer, MDBRow, MDBSpinner} from \"mdbreact\";\nimport ipfsClient from \"ipfs-http-client\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: null, account: null, ipfs: null};\n    }\n\n    componentWillMount() {\n        this.loadBlockchainData()\n    }\n\n    async loadBlockchainData() {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n            web3: web3,\n            account: accounts[0],\n            balance: web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether'),\n            ipfs: ipfs\n        });\n    }\n\n    render() {\n        if (!this.state.web3) {\n            return (\n                <Fragment>\n                    <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                    <Header account={\"not available yet\"}/>\n                    <MDBContainer className={\"mt-5\"}>\n                        <MDBRow center>\n                            <MDBCol md=\"4\" className={\"text-center\"}>\n                                <img src=\"assets/metamask.png\" style={{width: '50%'}} alt={\"Metamask\"}/>\n                            </MDBCol>\n                            <MDBCol md=\"6\" className={\"text-center\"}>\n                                <h3>Loading data from Metamask...</h3>\n                                <MDBSpinner className={\"mt-4\"} big/>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </Fragment>\n            );\n        }\n        return (\n            <Fragment>\n                <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                <Header account={this.state.account} balance={this.state.balance}/>\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <MainPage web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/create\" exact>\n                            <CreatePage web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/find\" exact>\n                            <FindPage web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/list\" exact>\n                            <ListPage web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/change\" exact>\n                            <ChangePage web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/test\" exact>\n                            <Test web3={this.state.web3} account={this.state.account} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"*\" component={NotFoundPage}/>\n                    </Switch>\n                </Router>\n                <Footer/>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}