{"version":3,"sources":["utils/list.js","pages/base.js","pages/main.js","components/modal.js","utils/validation.js","components/errors.js","pages/create.js","pages/find.js","pages/list.js","pages/change.js","pages/404.js","components/header.js","components/footer.js","components/title.js","App.js","utils/web3.js","serviceWorker.js","index.js"],"names":["_getInfoPet","tokenId","contract","account","a","methods","getPetInfo","call","from","listPets","list","owner","balanceOf","count","i","tokenOfOwnerByIndex","data","push","totalSupply","tokens","token","BasePage","props","loadData","viewType","state","pets","Object","keys","forEach","item","pet","check","onChange","onChangeCheckbox","checked","name","concat","id","label","type","name_pet","type_pet","color","color_pet","photo","src","photo_hash","width","alt","flat","onClick","e","openModal","url","setState","wait","web3","ipfs","Component","CardMenu","history","useHistory","handleClick","to","link","top","image","overlay","hover","className","outline","action","MainPage","center","sm","ValidationPopup","birthdate","birthdate_pet","toLocaleString","substring","size","isOpen","toggle","fluid","md","style","transactionInfo","error","multicolor","fontSize","border","target","rel","href","transactionHash","blockNumber","message","closeModal","PhotoPopup","side","position","TransferPopup","centered","validationData","rules","errors","field","hasOwnProperty","value","required","validator","isEmail","msg","isDate","Array","isArray","length","isEmpty","ErrorMessage","tag","variant","map","icon","xl","CreatePage","addToken","self","addPet","InfoPet","send","info","console","log","events","AddToken","returnValues","meteError","metaError","handleSelectPetType","pettype","handlePetBirthdate","petbirthdate","handleTerms","terms","handlePhotoChange","file","saveToIpfsWithFilename","calculateAutofocus","redirect","firstname","lastname","email","petname","petcolor","handleSubmit","bind","handleClose","handleChange","event","preventDefault","this","first_name","last_name","dateFormat","fileDetails","path","content","added_file_hash","add","added","cid","toString","far","group","middle","getValue","selected","disabled","valueDefault","emptyLabel","ref","fileupload","maxFileSize","allowedFileExtensions","containerHeight","maxHeight","errorMaxHeight","errorFileSize","errorFileExtension","autoFocus","ItemPet","CardPet","wide","cascade","infoPet","FindPage","getInfoPet","findId","handleFind","columnsInfo","zoom","height","ShowPets","showing","listRows","btn","fixed","columns","rows","array","reduce","result","index","Math","floor","ListPage","showAsRow","showAsCard","urlPhoto","narrow","rounded","big","previewStyle","ChangePage","changePetOwner","safeTransferFrom","address","delay","handleScan","err","left","onError","handleError","onScan","NotFoundPage","Header","domElement","placement","borderStyle","borderWidth","borderColor","balance","fontWeight","Footer","backgroundColor","Date","getFullYear","version","Title","document","title","App","loadBlockchainData","ipfsClient","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Token","networks","instance","Contract","abi","utils","getBalance","fromWei","basename","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a334de72.chunk.js","sourcesContent":["\nasync function _getInfoPet(tokenId, contract, account) {\n    return await contract.methods.getPetInfo(account, tokenId).call({from: account});\n}\n\nexport async function listPets (contract, account) {\n    let list = [];\n    const owner = await contract.methods.owner().call();\n    if (owner !== account) {\n        const count = await contract.methods.balanceOf(account).call({from: account});\n        for (let i = 0; i < count; i++) {\n            const tokenId = await contract.methods.tokenOfOwnerByIndex(account, i).call({from: account});\n            let data = await _getInfoPet(tokenId, contract, account);\n            list.push(data);\n        }\n    } else {\n        const tokens = await contract.methods.totalSupply().call({from: account});\n        for (let token = 1; token <= tokens; token++) {\n            let data = await _getInfoPet(token, contract, account);\n            list.push(data);\n        }\n    }\n    return list;\n}\n","import React, {Component} from \"react\";\nimport {listPets} from \"../utils/list\";\nimport {MDBInput, MDBBtn} from \"mdbreact\";\n\nexport class BasePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: props.web3, account: props.account, contract: props.contract, ipfs: props.ipfs};\n    }\n\n    loadData = async (viewType) => {\n        let list = [];\n        let pets = await listPets(this.state.contract, this.state.account);\n        Object.keys(pets).forEach(item => {\n            let pet = {}\n            if (viewType===1) {\n                pet = {\n                    check: <MDBInput onChange={this.onChangeCheckbox} checked={false} name={\"checkbox\".concat(pets[item].id)} label=\" \" type=\"checkbox\" id={pets[item].id}/>,\n                    id: pets[item].id,\n                    name: pets[item].name_pet,\n                    type: pets[item].type_pet,\n                    color: pets[item].color_pet,\n                    photo: <img src={\"https://ipfs.io/ipfs/\".concat(pets[item].photo_hash)} width=\"40px\" alt={pets[item].name_pet}/>\n                }\n            } else {\n                pet = {\n                    id: pets[item].id,\n                    name: pets[item].name_pet,\n                    type: pets[item].type_pet,\n                    color: pets[item].color_pet,\n                    photo: <MDBBtn flat onClick={(e) => this.openModal(pets[item].photo_hash, pets[item].name_pet, e)}><img\n                        src={\"https://ipfs.io/ipfs/\".concat(pets[item].photo_hash)} width=\"40px\"\n                        alt={pets[item].name_pet}/></MDBBtn>,\n                    url: \"https://ipfs.io/ipfs/\".concat(pets[item].photo_hash)\n                }\n            }\n            list.push(pet);\n        });\n        this.setState({list: list, wait: false});\n    }\n}\n","import React, {Fragment} from 'react';\nimport {BasePage} from './base';\nimport {useHistory} from \"react-router-dom\";\nimport {MDBBtn, MDBCard, MDBLink, MDBCardBody, MDBCardImage, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\n\nfunction CardMenu(props) {\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(props.url);\n    }\n\n    return (\n        <MDBCard>\n            <MDBLink to='#' onClick={handleClick} link>\n                <MDBCardImage\n                    top\n                    src={props.image}\n                    overlay='white-slight'\n                    hover\n                    alt='MDBCard image cap'\n                />\n            </MDBLink>\n            <MDBCardBody>\n                <div className={\"text-center\"}>\n                    <MDBBtn color=\"primary\" onClick={handleClick} outline>{props.action}</MDBBtn>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\nclass MainPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <MDBContainer className={\"my-4\"}>\n                    <MDBRow center>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Register a pet\"} image={\"assets/m1.jpeg\"} url={\"/create\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"List of pets\"} image={\"assets/m3.jpg\"} url={\"/list\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center className={\"mt-4\"}>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Find a pet\"} image={\"assets/find-pet.jpg\"} url={\"/find\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Change the owner\"} image={\"assets/m4.jpg\"} url={\"/change\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport {MDBBtn, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader, MDBRow, MDBSpinner} from 'mdbreact';\n\nexport const ValidationPopup = (props) => {\n    const birthdate = props.data.birthdate_pet !== null ? props.data.birthdate_pet.toLocaleString().substring(1, 10) : null;\n    return (\n        <MDBContainer>\n            <MDBModal size=\"lg\" isOpen={props.isOpen}>\n                <MDBModalHeader toggle={props.isOpen}>Waiting for registering your pet</MDBModalHeader>\n                <MDBModalBody>\n                    <MDBContainer fluid>\n                        <MDBRow>\n                            <MDBCol md=\"1\">\n                                <img\n                                    src={\"https://ipfs.io/ipfs/\".concat(props.data.photo_hash)} //https://ipfs.io/ipfs/QmRTGppwz2kRBB6vwfnmpYcATNWPgCZH6wrbbU1ruFjiQT\n                                    alt={\"ipfs data store\"}\n                                    style={{width: \"7em\"}}/>\n                            </MDBCol>\n                            <MDBCol md=\"8\" className=\"ml-auto\">\n                                <p className=\"py-0 my-1\">Name: <strong>{props.data.name_pet}</strong></p>\n                                <p className=\"py-0  my-1\">Type: <strong>{props.data.type_pet}</strong></p>\n                                <p className=\"py-0  my-1\">Birthdate :<strong>{birthdate}</strong></p>\n                                <p className=\"py-0  my-1\">Color: <strong>{props.data.color_pet}</strong></p>\n\n                            </MDBCol>\n                        </MDBRow>\n                        <MDBRow>\n                            <MDBCol md=\"12\">\n                                {(props.transactionInfo.id === null && props.error === null) &&\n                                <div className=\"text-center my-3\"><MDBSpinner multicolor/></div>\n                                }\n                                {(props.transactionInfo.id !== null && props.error === null) &&\n                                <MDBContainer fluid>\n                                    <div className=\"text-left my-3 p-3 m-3\" style={{fontSize: \"0.85em\", border: \"solid 1px grey\"}}>\n                                        <p className=\"py-0 my-1\">Transaction hash: <a target=\"_blank\" rel=\"noopener noreferrer\"\n                                                                                      href={'https://goerli.etherscan.io/tx/' + props.transactionInfo.transactionHash}><strong>{props.transactionInfo.transactionHash}</strong></a>\n                                        </p>\n                                        <p className=\"py-0  my-1\">Block number: <strong>{props.transactionInfo.blockNumber}</strong></p>\n                                        <p className=\"py-0  my-1\">Token ID :<strong>{props.transactionInfo.id}</strong></p>\n                                    </div>\n                                </MDBContainer>\n                                }\n                                {(props.transactionInfo.id === null && props.error !== null) &&\n                                <div className=\"text-center my-3\">\n                                    <p className=\"text-danger\">{props.error.message}</p>\n                                </div>\n                                }\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </MDBModalBody>\n                {(props.transactionHash !== null || props.error !== null) &&\n                <MDBModalFooter>\n                    < MDBBtn outline color=\"success\" onClick={props.closeModal}>Close</MDBBtn>\n                </MDBModalFooter>\n                }\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\nexport const PhotoPopup = (props) => {\n    return (\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen} side position=\"top-right\">\n                <MDBModalHeader toggle={props.isOpen}>{props.name}</MDBModalHeader>\n                <MDBModalBody>\n                    <div className=\"text-center\">\n                        <img\n                            src={\"https://ipfs.io/ipfs/\".concat(props.photo_hash)} //https://ipfs.io/ipfs/QmRTGppwz2kRBB6vwfnmpYcATNWPgCZH6wrbbU1ruFjiQT\n                            alt={\"ipfs data store\"}\n                            style={{width: \"22em\"}}/>\n                    </div>\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBContainer className=\"text-center\">\n                        <MDBBtn outline color=\"success\" onClick={props.closeModal}>Close</MDBBtn>\n                    </MDBContainer>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\nexport const TransferPopup = (props) => {\n    return (\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen} centered>\n                <MDBModalHeader toggle={props.isOpen}>Transfer ongoing</MDBModalHeader>\n                <MDBModalBody>\n                    <div className=\"text-center\">\n                        {(props.transactionHash === null && props.error === null) &&\n                        <MDBSpinner multicolor/>\n                        }\n                        {(props.transactionHash !== null && props.error === null) &&\n                        <p>The pet has been transferred with success</p>\n                        }\n                        {(props.transactionHash === null && props.error !== null) &&\n                        <div className=\"text-center my-3\">\n                            <p className=\"text-danger\">{props.error.message}</p>\n                        </div>\n                        }\n                    </div>\n                </MDBModalBody>\n                {(props.transactionHash !== null || props.error !== null) &&\n                <MDBModalFooter>\n                    <MDBContainer className=\"text-center\">\n                        <MDBBtn outline color=\"success\" onClick={props.closeModal}>Close</MDBBtn>\n                    </MDBContainer>\n                </MDBModalFooter>\n                }\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n","import validator from \"validator\";\n\nexport const validationData = (rules, data) => {\n    let errors = [];\n    Object.keys(data).forEach(field => {\n        if (rules.hasOwnProperty(field)) {\n            let value = data[field];\n            if (rules[field].required) {\n                switch (rules[field].type) {\n                    case 'email':\n                        if (value === null || !validator.isEmail(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                        break;\n                    case 'date':\n                        if (value === null || !validator.isDate(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                        break;\n                    case 'boolean':\n                        if (typeof value === 'boolean') {\n                            if (!value) {\n                                errors.push(rules[field].msg);\n                            }\n                        }\n                        if (typeof value === 'string') {\n                            if (value === 'false') {\n                                errors.push(rules[field].msg);\n                            }\n                        }\n                        break\n                    case 'list':\n                        if (Array.isArray(value)) {\n                            if (value.length === 0) {\n                                errors.push(rules[field].msg);\n                            }\n                        }\n                        break\n                    default:\n                        if (value === null || validator.isEmpty(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                }\n            }\n        }\n    });\n    return errors;\n}\n","import {MDBAlert, MDBCol, MDBContainer, MDBIcon, MDBRow, MDBTypography} from \"mdbreact\";\nimport React from \"react\";\n\nconst ErrorMessage = (props) => {\n    const errors = props.errors;\n    return (\n        <div>\n            {errors.length > 0 &&\n            <MDBContainer className=\"mt-4\">\n                <MDBAlert color=\"danger\">\n                    <MDBTypography tag='h6' variant=\"h6\">Submitting failed - {errors.length} field(s) must be corrected</MDBTypography>\n                    {\n                        errors.map((field) =>\n                            <MDBRow>\n                                <MDBCol size=\"1\" className=\"ml-3\">\n                                    <MDBIcon icon=\"exclamation-triangle\" className=\"red-text\"/>\n                                </MDBCol>\n                                <MDBCol xl=\"10\" size=\"11\">\n                                    <p className=\"red-text\">{field}. Please complete this field</p>\n                                </MDBCol>\n                            </MDBRow>\n                        )\n                    }\n                </MDBAlert>\n            </MDBContainer>\n            }\n        </div>\n    );\n}\n\n\nexport default ErrorMessage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\nimport {Redirect} from 'react-router'\nimport {\n    MDBBtn,\n    MDBCol,\n    MDBContainer,\n    MDBDatePicker,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBSelect,\n    MDBSelectInput,\n    MDBSelectOption,\n    MDBSelectOptions\n} from \"mdbreact\";\nimport MDBFileupload from \"mdb-react-fileupload\";\nimport {ValidationPopup} from '../components/modal';\nimport {validationData} from \"../utils/validation\";\nimport ErrorMessage from \"../components/errors\";\nimport dateFormat from 'dateformat'\n\nclass CreatePage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            redirect: false,\n            openModal: false,\n            errors: [],\n            transactionInfo : {\n                transactionHash: null,\n                blockNumber: null,\n                id: null\n            },\n            firstname: null,\n            lastname: null,\n            email: null,\n            petname: null,\n            petcolor: null,\n            pettype: null,\n            petbirthdate: null,\n            photo_hash: null,\n            terms: 'false',\n            metaError: null,\n        }\n\n        this.rules = {\n            firstname: {required: true, type: 'string', msg: 'your firstname is required'},\n            lastname: {required: true, type: 'string', msg: 'your lastname is required'},\n            email: {required: true, type: 'email', msg: 'your email is required or is not valid'},\n            petname: {required: true, type: 'string', msg: 'Name of your pet is required'},\n            petcolor: {required: true, type: 'string', msg: 'Color of your pet is required'},\n            pettype: {required: true, type: 'string', msg: 'Kind of your pet is required'},\n            petbirthdate: {required: true, type: 'date', msg: 'Birthdate of your pet is required'},\n            photo_hash: {required: true, type: 'string', msg: 'Photo of your pet is required'},\n            terms: {required: true, type: 'boolean', msg: 'Terms must be accepted'}\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePetBirthdate = this.handlePetBirthdate.bind(this);\n        this.handleSelectPetType = this.handleSelectPetType.bind(this);\n        this.handlePhotoChange = this.handlePhotoChange.bind(this);\n        this.handleTerms = this.handleTerms.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const errors = validationData(this.rules, this.state);\n\n        this.setState({errors: errors});\n        this.setState({openModal: errors.length === 0 ? true : false});\n        if (errors.length === 0) {\n            this.addToken();\n        }\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    InfoPet()  {\n        return {\n            id: 0,\n            first_name: this.state.firstname,\n            last_name: this.state.lastname,\n            email: this.state.email,\n            name_pet: this.state.petname,\n            type_pet: this.state.pettype,\n            color_pet: this.state.petcolor,\n            birthdate_pet: dateFormat(this.state.petbirthdate, \"dd/mm/yyyy\"),\n            photo_hash: this.state.photo_hash\n        }\n    }\n\n    addToken = async () => {\n        let self = this;\n        const {account, contract} = this.state;\n\n        try {\n            let info = await contract.methods.addPet(account, this.InfoPet()).send({from: account});\n            console.log('INFO*****************************************')\n            console.log(info);\n            console.log('INFO*****************************************')\n            const transactionInfo = {\n                transactionHash: info.events.AddToken.transactionHash,\n                blockNumber:info.events.AddToken.blockNumber,\n                id: info.events.AddToken.returnValues.id\n            }\n            self.setState({transactionInfo: transactionInfo, meteError: null});\n        } catch (err) {\n            console.log('***********************************')\n            console.log(err);\n            console.log('***********************************')\n            this.setState({metaError: err});\n        }\n    };\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSelectPetType = (value) => {\n        this.setState({pettype: value[0]});\n    }\n\n    handlePetBirthdate = (value) => {\n        this.setState({petbirthdate: value});\n    }\n\n    handleTerms = (value) => {\n        this.setState({terms: value});\n    }\n\n    handlePhotoChange = (file) => {\n        this.saveToIpfsWithFilename(file);\n    }\n\n    async saveToIpfsWithFilename(file) {\n        try {\n            const fileDetails = {path: file.name, content: file, added_file_hash: null}\n            const added = await this.state.ipfs.add(fileDetails);\n            this.setState({photo_hash: added.cid.toString()});\n            console.log(added.cid.toString());\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    calculateAutofocus = (a) => {\n        if (this.state['formActivePanel' + a + 'Changed']) {\n            return true\n        }\n    }\n\n    closeModal = () => {\n        this.setState({openModal: false});\n        this.setState({redirect: true});\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n\n        return (\n            <Fragment>\n                <ValidationPopup isOpen={this.state.openModal} error={this.state.metaError} closeModal={this.closeModal} data={this.InfoPet()} transactionInfo={this.state.transactionInfo}/>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon far icon=\"edit\"/> Create an ID for\n                        your pet</h2>\n                    <form className=\"needs-validation\">\n                        <div className=\"indigo-text\">\n                            <h4 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"user\"/> Some information about You\n                            </h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"firstname\" onChange={this.handleChange} value={this.state.firstname}\n                                              label=\"Your firstname\" icon=\"user-edit\"\n                                              type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"lastname\" onChange={this.handleChange} value={this.state.lastname}\n                                              label=\"Your lastname\" icon=\"user-edit\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"email\" onChange={this.handleChange} value={this.state.email}\n                                              label=\"Your email\" icon=\"envelope\" group type=\"email\"/>\n                                </div>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"paw\"/> Information of your\n                                well loved pet</h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petname\" onChange={this.handleChange} value={this.state.petname}\n                                              label=\"Name\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petcolor\" onChange={this.handleChange} value={this.state.petcolor}\n                                              label=\"Color\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <MDBContainer>\n                                    <MDBRow middle>\n                                        <MDBCol sm=\"8\">\n                                            <div className={\"create-div\"}>\n                                                <MDBSelect label='Kind of pet' getValue={this.handleSelectPetType}>\n                                                    <MDBSelectInput selected=\"aaa\"/>\n                                                    <MDBSelectOptions>\n                                                        <MDBSelectOption disabled>Kind of your pet</MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'cat'}\n                                                                         value='cat' icon='assets/select-cat.jpg'>\n                                                            Cat\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'dog'}\n                                                                         value='dog' icon='assets/select-dog.jpg'>\n                                                            Dog\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'rabbit'}\n                                                                         value='rabbit' icon='assets/select-rabbit.jpg'>\n                                                            Rabbit\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'bird'}\n                                                                         value='bird' icon='assets/select-bird.jpg'>\n                                                            Bird\n                                                        </MDBSelectOption>\n                                                    </MDBSelectOptions>\n                                                </MDBSelect>\n                                            </div>\n                                        </MDBCol>\n                                        <MDBCol sm=\"4\">\n                                            <div className={\"create-div text-center\"}>\n                                                <MDBDatePicker valueDefault={null} emptyLabel=\"Birthdate of your pet\"\n                                                               value={this.state.petbirthdate}\n                                                               getValue={this.handlePetBirthdate}/>\n                                            </div>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </MDBContainer>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 mb-3 grey-text\"><MDBIcon icon=\"camera\"/> Add a Photo of\n                                your pet</h4>\n                            <div className={\"px-4\"}>\n                                <MDBFileupload\n                                    getValue={this.handlePhotoChange}\n                                    ref={fileupload => this.fileupload = fileupload}\n                                    maxFileSize=\"1M\"\n                                    allowedFileExtensions={['jpg', 'png', 'bmp']}\n                                    containerHeight={600}\n                                    maxHeight={1500}\n                                    errorMaxHeight=\"Your photo must not have more than 500 pixels height\"\n                                    errorFileSize=\"The size of your photo is too big\"\n                                    errorFileExtension=\"The type of your photo is not allowed\"\n                                />\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"check\"/> Registration\n                                completed!</h4>\n                            <div className=\"px-4\">\n                                <p className=\"font-weight-bold mt-3 mb-1\"><strong>Terms and conditions</strong></p>\n                                <MDBInput name=\"terms\" getValue={this.handleTerms}\n                                          label=\"I agreee to the terms and conditions\" type=\"checkbox\" id=\"checkbox\"\n                                          autoFocus={this.calculateAutofocus(1)}/>\n                                <MDBInput label=\"I want to receive newsletter\" type=\"checkbox\" id=\"checkbox2\"/>\n                                <div className=\"text-right mt-2\">\n                                    <MDBBtn outline color=\"grey\" onClick={this.handleClose}>cancel</MDBBtn>\n                                    <MDBBtn outline color=\"success\" onClick={this.handleSubmit}>submit</MDBBtn>\n                                </div>\n                            </div>\n                            <ErrorMessage errors={this.state.errors}/>\n                        </div>\n                    </form>\n                </MDBContainer>\n            </Fragment>\n        )\n    }\n}\n\nexport default CreatePage;","import React, {Fragment} from \"react\";\nimport {Redirect} from 'react-router'\nimport {MDBBtn, MDBCol, MDBContainer, MDBIcon, MDBInput, MDBRow, MDBView, MDBCard, MDBCardImage, MDBCardBody, MDBCardTitle} from 'mdbreact';\nimport {BasePage} from './base';\nimport {validationData} from \"../utils/validation\";\nimport ErrorMessage from \"../components/errors\";\n\n\nconst ItemPet = (props) => {\n    return (\n        <MDBRow className=\"ml-2\">\n            <MDBCol sm=\"3\">\n                <span className=\"grey-text\">{props.label}:</span>\n            </MDBCol>\n            <MDBCol sm=\"9\">\n                <strong>{props.value}</strong>\n            </MDBCol>\n        </MDBRow>\n    );\n}\n\nconst CardPet = (props) => {\n    console.log(props);\n    return (\n        <MDBCard wide cascade>\n            <MDBView cascade>\n                <MDBCardImage\n                    hover\n                    overlay='white-slight'\n                    className='card-img-top'\n                    src={\"https://ipfs.io/ipfs/\".concat(props.infoPet.photo_hash)}\n                    alt='Card cap'\n                />\n            </MDBView>\n            <MDBCardBody cascade className='text-center mb-3'>\n                <MDBCardTitle className='card-title indigo-text h2'>\n                    <strong>{props.infoPet.name_pet}</strong>\n                </MDBCardTitle>\n                <div className=\"text-left mt-4\">\n                    <h5 className=\"indigo-text\"><MDBIcon icon=\"user\"/> You</h5>\n                    <ItemPet label=\"Name\" value={props.infoPet.first_name}/>\n                    <ItemPet label=\"Email\" value={props.infoPet.email}/>\n                    <h5 className=\"indigo-text mt-4\"><MDBIcon icon=\"cat\"/> Your lovely pet</h5>\n                    <ItemPet label=\"kind of pet\" value={props.infoPet.type_pet}/>\n                    <ItemPet label=\"Birthdate\" value={props.infoPet.birthdate_pet}/>\n                    <ItemPet label=\"Color\" value={props.infoPet.color_pet}/>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    );\n}\n\n\nclass FindPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            errors: [],\n            findId: null,\n            infoPet: null,\n            redirect: false\n        }\n\n        this.rules = {\n            findId: {required: true, type: 'string', msg: 'unique ID is required'}\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleFind = this.handleFind.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    handleFind(event) {\n        event.preventDefault();\n        this.setState({infoPet: null});\n        const errors = validationData(this.rules, this.state);\n        if (errors.length === 0) {\n            this.getInfoPet();\n        } else {\n            this.setState({errors: errors});\n        }\n    }\n\n    getInfoPet = async () => {\n        try {\n            const infoPet = await this.state.contract.methods.getPetInfo(this.state.account, this.state.findId).call({from: this.state.account});\n            this.setState({infoPet: infoPet});\n        } catch (err) {\n            let errors = [\"Failed to get data\"];\n            this.setState({errors: errors});\n        }\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-2\"><MDBIcon icon=\"search\"/> Find a pet</h2>\n                    <MDBRow center>\n                        <MDBCol sm=\"6\">\n                            <div className=\"indigo-text create-div\">\n                                <MDBInput name=\"findId\" onChange={this.handleChange} value={this.state.findId} label=\"Type a valid ID\" icon=\"pen-fancy\" group type=\"text\"/>\n                            </div>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center>\n                        <MDBCol sm=\"6\" className=\"text-right\">\n                            <MDBBtn outline color=\"success\" onClick={this.handleFind}>Find</MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center>\n                        <MDBCol sm=\"12\" className=\"text-left\">\n                            <ErrorMessage errors={this.state.errors}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                        <MDBCol sm=\"12\" className=\"mt-5\">\n                            {this.state.infoPet !== null &&\n                            <MDBContainer>\n                                <MDBRow center>\n                                    <MDBCol size=\"8\">\n                                        <CardPet infoPet={this.state.infoPet}/>\n                                    </MDBCol>\n                                </MDBRow>\n                            </MDBContainer>\n                            }\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                        <MDBCol sm=\"12\" className=\"mt-4 text-right\">\n                            <MDBBtn outline color=\"grey\" onClick={this.handleClose}>Back to the menu</MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default FindPage;\n","import React, {Fragment} from \"react\";\nimport {Redirect} from 'react-router'\nimport {BasePage} from './base';\nimport {\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardHeader,\n    MDBCol,\n    MDBContainer,\n    MDBIcon,\n    MDBRow,\n    MDBTable,\n    MDBTableBody,\n    MDBTableHead,\n    MDBCardImage,\n    MDBCardTitle,\n    MDBSpinner, MDBInput\n} from 'mdbreact';\nimport {PhotoPopup} from '../components/modal';\nimport {listPets} from \"../utils/list\";\n\nconst ShowPetsAsRow = 1;\nconst ShowPetsAsCard = 2;\n\nconst columnsInfo = [\n    {\n        'label': 'Unique ID',\n        'field': 'id',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Pet\\'name',\n        'field': 'name',\n        'sort': 'asc'\n    },\n    {\n        'label': 'kind of pet',\n        'field': 'type',\n        'sort': 'asc'\n    },\n    {\n        'label': 'color',\n        'field': 'color',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Photo',\n        'field': 'photo',\n        'sort': 'asc'\n    }\n];\n\nconst ItemPet = (props) => {\n    return (\n        <MDBRow>\n            <MDBCol sm=\"4\">\n                <span className=\"grey-text\">{props.label}:</span>\n            </MDBCol>\n            <MDBCol sm=\"8\">\n                <strong>{props.value}</strong>\n            </MDBCol>\n        </MDBRow>\n    );\n}\n\nconst CardPet = (props) => {\n    return (\n        <MDBCard className=\"my-2\">\n            <MDBCardImage className=\"img-fluid hoverable\" src={props.pet.url} zoom style={{width: \"450px\", height: \"250px\"}}/>\n            <MDBCardBody>\n                <MDBCardTitle className=\"indigo-text\">{props.pet.name}</MDBCardTitle>\n                <div style={{fontSize: \"0.80em\"}}>\n                    <ItemPet label=\"Id\" value={props.pet.id}/>\n                    <ItemPet label=\"kind of pet\" value={props.pet.type}/>\n                    <ItemPet label=\"Color\" value={props.pet.color}/>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\nconst splitList = (array, length) =>\n    array.reduce(\n        (result, item, index) => {\n            if (index % length === 0) result.push([])\n            result[Math.floor(index / length)].push(item)\n            return result\n        },\n        []\n    )\n\nconst ShowPets = (props) => {\n    if (props.showing === ShowPetsAsRow) {\n\n        let listRows = [];\n        props.list.map(item => (\n            listRows.push({id: item.id, name: item.name, type: item.type, color: item.color, photo: item.photo})\n        ));\n        return (\n            <MDBTable btn fixed>\n                <MDBTableHead columns={columnsInfo}/>\n                <MDBTableBody rows={listRows}/>\n            </MDBTable>\n        );\n    } else {\n        return (\n            <MDBContainer fluid>\n                {\n                    splitList(props.list, 3).map(item => (\n                        <MDBRow>\n                            {\n                                item.map(pet => (\n                                    <MDBCol size=\"4\"><CardPet pet={pet}/></MDBCol>\n                                ))\n                            }\n                        </MDBRow>\n                    ))\n                }\n            </MDBContainer>\n        );\n    }\n}\n\nclass ListPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            wait: true,\n            showing: ShowPetsAsRow,\n            redirect: false,\n            openModal: false,\n            photo_hash: null,\n            name: null,\n            list: []\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.showAsRow = this.showAsRow.bind(this);\n        this.showAsCard = this.showAsCard.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData(2);\n    }\n\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n\n    showAsRow = (event) => {\n        this.setState({showing: ShowPetsAsRow});\n    }\n\n    showAsCard = (event) => {\n        this.setState({showing: ShowPetsAsCard});\n    }\n\n    closeModal = (event) => {\n        this.setState({openModal: false});\n    }\n\n    openModal = (urlPhoto, name, e) => {\n        this.setState({openModal: true, photo_hash: urlPhoto, name: name});\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <PhotoPopup isOpen={this.state.openModal} photo_hash={this.state.photo_hash} name={this.state.name} closeModal={this.closeModal}/>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon icon=\"list\"/> List of pets</h2>\n                    <MDBCard narrow>\n                        <MDBCardHeader className=\"view view-cascade gradient-card-header blue-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">\n                            <span>Pets for {this.state.account}</span>\n                            <div>\n                                <MDBBtn onClick={this.showAsCard} outline rounded size=\"sm\" color=\"white\" className=\"px-2\">\n                                    <i className=\"fa fa-th-large mt-0\"></i>\n                                </MDBBtn>\n                                <MDBBtn onClick={this.showAsRow} outline rounded size=\"sm\" color=\"white\" className=\"px-2\">\n                                    <i className=\"fa fa-align-justify mt-0\"></i>\n                                </MDBBtn>\n                            </div>\n                        </MDBCardHeader>\n                        <MDBCardBody cascade>\n                            {this.state.wait === true\n                                ? <div className={\"text-center align-middle\"}><MDBSpinner className={\"my-2\"} big/></div>\n                                : <Fragment>\n                                    {this.state.list.length === 0\n                                        ? <div className={\"text-center grey-text align-middle p-1\"}>\n                                            <p style={{fontSize: \"0.95em\"}}>No pets already registered</p>\n                                        </div>\n                                        : <ShowPets list={this.state.list} showing={this.state.showing}/>\n                                    }\n                                </Fragment>\n                            }\n                        </MDBCardBody>\n                    </MDBCard>\n                    <div className=\"text-right mt-2\">\n                        <MDBBtn outline color=\"grey\" onClick={this.handleClose}>Back to the menu</MDBBtn>\n                    </div>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default ListPage;\n","import React, {Fragment} from \"react\";\nimport {Redirect} from 'react-router'\nimport {BasePage} from './base';\nimport QrReader from 'react-qr-scanner'\nimport {MDBBtn, MDBCard, MDBCardTitle, MDBCol, MDBContainer, MDBIcon, MDBInput, MDBRow, MDBSpinner, MDBTable, MDBTableBody, MDBTableHead} from \"mdbreact\";\nimport ErrorMessage from \"../components/errors\";\nimport {validationData} from \"../utils/validation\";\nimport {TransferPopup} from '../components/modal';\n\nconst previewStyle = {\n    height: \"100%\",\n    width: \"100%\",\n}\n\nconst columnsInfo = [\n    {\n        'label': 'Selected',\n        'field': 'check',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Unique ID',\n        'field': 'id',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Pet\\'name',\n        'field': 'name',\n        'sort': 'asc'\n    },\n    {\n        'label': 'kind of pet',\n        'field': 'type',\n        'sort': 'asc'\n    },\n    {\n        'label': 'color',\n        'field': 'color',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Photo',\n        'field': 'photo',\n        'sort': 'asc'\n    }\n];\n\nclass ChangePage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            isOpen: false,\n            wait: true,\n            errors: [],\n            list: [],\n            delay: 100,\n            address: null,\n            redirect: false,\n            transactionHash: null,\n            error: null\n        }\n\n        this.rules = {\n            address: {required: true, type: 'string', msg: 'address of the new owner is required'}\n        }\n\n        this.handleClose = this.handleClose.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleScan = this.handleScan.bind(this);\n        this.onChangeCheckbox = this.onChangeCheckbox.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData(1);\n    }\n\n    closeModal = (event) => {\n        this.setState({isOpen: false});\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    changePetOwner = async (tokenId) => {\n        this.setState({isOpen: true});\n        try {\n            let info = await this.state.contract.methods.safeTransferFrom(this.state.account, this.state.address, tokenId).send({from: this.state.account});\n            this.setState({transactionHash: info.transactionHash, error: null});\n            this.loadData();\n        } catch (err) {\n            this.setState({error: err});\n        }\n    }\n\n    handleChange(event) {\n        //let addr = event.target.value;\n        //console.log(this.state.web3.utils.isAddress(addr));\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleScan(data) {\n        //console.log(this.state.web3.utils.isAddress(data));\n        this.setState({address: data});\n    }\n\n    handleError(err) {\n        console.error(err)\n    }\n\n    onChangeCheckbox(event) {\n        const errors = validationData(this.rules, this.state);\n        this.setState({errors: errors});\n        if (errors.length === 0) {\n            this.changePetOwner(event.target.id);\n        }\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <TransferPopup isOpen={this.state.isOpen} error={this.state.error} transactionHash={this.state.transactionHash} closeModal={this.closeModal}/>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon icon=\"exchange-alt\"/> Change a pet'owner</h2>\n                    <h5 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"address-book\"/> Address of the future owner</h5>\n                    <MDBRow left className=\"ml-3\">\n                        <MDBCol size={8}>\n                            <div className=\"indigo-text create-div\">\n                                <MDBInput name=\"address\" onChange={this.handleChange} value={this.state.address} label=\"Type a valid address\" icon=\"pen-fancy\" group type=\"text\"/>\n                            </div>\n                        </MDBCol>\n                    </MDBRow>\n                    {(this.state.address === null || this.state.address === \"\") &&\n                    <Fragment>\n                        <MDBRow center>\n                            <MDBCol size={6}>\n                                <MDBCard className=\"card-body mt-5\">\n                                    <MDBCardTitle className=\"text-center grey-text\"><strong>Scan the QRCode</strong></MDBCardTitle>\n                                    <QrReader\n                                        delay={this.state.delay}\n                                        style={previewStyle}\n                                        onError={this.handleError}\n                                        onScan={this.handleScan}\n                                    />\n                                </MDBCard>\n                            </MDBCol>\n                        </MDBRow>\n                    </Fragment>\n                    }\n                    <div className=\"mt-5\">\n                        <h5 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"list\"/> List of your pets</h5>\n                        <MDBRow center className=\"ml-3 mt-3\">\n                            <MDBCol size={12}>\n                                {this.state.wait === true\n                                    ? <div className={\"text-center align-middle\"}><MDBSpinner className={\"my-2\"} big/></div>\n                                    : <MDBTable btn fixed>\n                                        {this.state.list.length === 0\n                                            ? <div className={\"text-center grey-text align-middle p-1 mt-4\"}>\n                                                <p style={{fontSize: \"0.95em\"}}>No pets already registered</p>\n                                            </div>\n                                            : <Fragment>\n                                                <MDBTableHead columns={columnsInfo}/>\n                                                < MDBTableBody rows={this.state.list}/>\n                                            </Fragment>\n                                        }\n                                    </MDBTable>\n                                }\n                            </MDBCol>\n                        </MDBRow>\n                    </div>\n                    <MDBRow>\n                        <MDBCol size={12}>\n                            <div className=\"text-right mt-2\">\n                                <MDBBtn outline color=\"success\" onClick={this.handleClose}>Back to the menu</MDBBtn>\n                            </div>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center>\n                        <MDBCol sm=\"12\" className=\"text-left\">\n                            <ErrorMessage errors={this.state.errors}/>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default ChangePage;","import React, {Component, Fragment} from 'react';\n\nclass NotFoundPage extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>404 page not found</h1>\n            </Fragment>\n        );\n    }\n}\n\nexport default NotFoundPage;","import React from 'react';\nimport {MDBCol, MDBContainer, MDBRow, MDBTooltip} from \"mdbreact\";\n\nconst Header = (props) => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"4\">\n                    <a href={\"https://denislamard.github.io/id-pet/\"}><img src=\"assets/pets.png\" className=\"pt-2\" alt=\"logo\" style={{width: '100%'}}/></a>\n                    <MDBTooltip domElement tag=\"p\"  placement=\"bottom\">\n                        <p className={\"text-center indigo-text align-middle p-1\"}\n                           style={{fontSize: \"0.80em\", borderStyle: \"solid\", borderWidth: \"thin\", borderColor: \"#bdbdbd\"}}>\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://goerli.etherscan.io/address/' + props.account}> <img src=\"assets/etherscan.png\"\n                                                                                                                                             alt=\"etherscan\"\n                                                                                                                                             style={{width: '16px'}}/> {props.account}\n                            </a>\n                        </p>\n                        <span>Balance: <b>{props.balance}</b> ether</span>\n                    </MDBTooltip>\n                </MDBCol>\n                <MDBCol md=\"8\">\n                    <h2 className=\"indigo-text text-center\" style={{fontSize: \"4em\", fontWeight: \"bolder\"}}>ID-PET  D-APPLICATION</h2>\n                    <p className=\"lead text-justify grey-text mt-4\">This is a simple example of a decentralized\n                        application based on unique non-fungible tokens on the Ethereum ERC721 blockchain.\n                        Its main goal is to identify pets on the Ethereum blockchain.\n                    </p>\n                </MDBCol>\n            </MDBRow>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <hr className=\"my-2\"/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport {MDBCol, MDBContainer, MDBFooter, MDBRow, MDBIcon} from \"mdbreact\";\n\nconst Footer = (props) => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <MDBFooter color=\"mdb-color darken-3\" className=\"font-small pt-3 mt-5\">\n                        <MDBContainer fluid className=\"text-center text-md-left\">\n                            <MDBRow>\n                                <MDBCol md=\"8\">\n                                    <h5 className=\"title\"><MDBIcon icon=\"paw\" /> Decentralized Application</h5>\n                                    <hr className=\"my-1\" style={{color:\"white\",backgroundColor:\"white\"}}/>\n                                    <p className={\"text-justify\"} style={{color: \"rgba(255,255,255,0.6)\"}}>\n                                        A decentralized application is a computer application that runs on a distributed computing system. DApps have been popularized by distributed ledger technologies (DLT) such as the Ethereum Blockchain, where DApps are often referred to as smart contracts.\n                                    </p>\n                                </MDBCol>\n                                <MDBCol md=\"4\" className={\"text-center\"}>\n                                    <img src=\"assets/pets.png\" className=\"pt-1\" alt=\"logo\" style={{width: '80%'}}/>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                        <div className=\"footer-copyright text-center py-2\">\n                            <MDBContainer fluid>\n                                &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.mdbootstrap.com\"> Denis LAMARD </a> - Contract version: <strong>{props.version}</strong>\n                            </MDBContainer>\n                        </div>\n                    </MDBFooter>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default Footer;","import {Component} from 'react'\n\nexport class Title extends Component {\n\n    componentDidMount() {\n        document.title = this.props.name + ' version ' + this.props.version;\n    }\n\n    render() {\n        return null;\n    }\n}","import React, {Component, Fragment} from 'react';\nimport {Route, Switch, HashRouter} from \"react-router-dom\";\n\nimport MainPage from \"./pages/main\";\nimport CreatePage from \"./pages/create\";\nimport FindPage from \"./pages/find\";\nimport ListPage from \"./pages/list\";\nimport ChangePage from \"./pages/change\";\nimport NotFoundPage from \"./pages/404\";\nimport Header from './components/header';\nimport Footer from \"./components/footer\";\nimport {Title} from \"./components/title\";\n\nimport {getWeb3} from \"./utils/web3\";\nimport './App.css';\nimport {MDBCol, MDBContainer, MDBRow, MDBSpinner} from \"mdbreact\";\nimport ipfsClient from \"ipfs-http-client\";\nimport Token from \"./contracts/Token.json\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: null, account: null, ipfs: null, version: null};\n    }\n\n    componentWillMount() {\n        this.loadBlockchainData()\n    }\n\n    async loadBlockchainData() {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Token.networks[networkId];\n        const instance = new web3.eth.Contract(Token.abi, deployedNetwork && deployedNetwork.address);\n        const version = await await instance.methods.version().call();\n\n        this.setState({\n            web3: web3,\n            account: accounts[0],\n            balance: web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether'),\n            contract: instance,\n            version: version,\n            ipfs: ipfs\n        });\n    }\n\n    render() {\n        if (!this.state.web3) {\n            return (\n                <Fragment>\n                    <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                    <Header account={\"not available yet\"}/>\n                    <MDBContainer className={\"mt-5\"}>\n                        <MDBRow center>\n                            <MDBCol md=\"4\" className={\"text-center\"}>\n                                <img src=\"assets/metamask.png\" style={{width: '50%'}} alt={\"Metamask\"}/>\n                            </MDBCol>\n                            <MDBCol md=\"6\" className={\"text-center\"}>\n                                <h3>Loading data from Metamask...</h3>\n                                <MDBSpinner className={\"mt-4\"} big/>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </Fragment>\n            );\n        }\n        return (\n            <Fragment>\n                <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                <Header account={this.state.account} balance={this.state.balance}/>\n                <HashRouter basename=\"/\">\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <MainPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/create\" exact>\n                            <CreatePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/find\" exact>\n                            <FindPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/list\" exact>\n                            <ListPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/change\" exact>\n                            <ChangePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"*\" component={NotFoundPage}/>\n                    </Switch>\n                </HashRouter>\n                <Footer version={this.state.version}/>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}