{"version":3,"sources":["pages/base.js","pages/main.js","components/modal.js","utils/validation.js","components/errors.js","pages/create.js","pages/find.js","pages/list.js","pages/change.js","pages/404.js","components/header.js","components/footer.js","components/title.js","pages/test-call.js","pages/test-list.js","App.js","utils/web3.js","serviceWorker.js","index.js"],"names":["BasePage","props","state","web3","account","contract","ipfs","Component","CardMenu","history","useHistory","handleClick","push","url","to","onClick","link","top","src","image","overlay","hover","alt","className","color","outline","action","MainPage","center","sm","PhotoPopup","console","log","isOpen","side","position","toggle","name","concat","photo_hash","style","width","closeModal","ValidationPopup","birthdate","data","birthdate_pet","toLocaleString","substring","size","fluid","md","name_pet","type_pet","color_pet","transactionInfo","id","multicolor","fontSize","border","target","rel","href","transactionHash","blockNumber","validationData","rules","errors","Object","keys","forEach","field","hasOwnProperty","value","required","type","validator","isEmail","msg","isDate","isEmpty","ErrorMessage","length","tag","variant","map","icon","xl","CreatePage","addToken","a","self","methods","addPet","InfoPet","send","from","on","receipt","setState","tokenId","events","AddToken","returnValues","handleSelectPetType","pettype","handlePetBirthdate","petbirthdate","handleTerms","terms","handlePhotoChange","file","saveToIpfsWithFilename","calculateAutofocus","openModal","redirect","firstname","lastname","email","petname","petcolor","handleSubmit","bind","handleClose","handleChange","event","preventDefault","this","first_name","last_name","dateFormat","fileDetails","path","content","added_file_hash","add","added","cid","toString","error","far","onChange","label","group","middle","getValue","selected","disabled","valueDefault","emptyLabel","ref","fileupload","maxFileSize","allowedFileExtensions","containerHeight","maxHeight","errorMaxHeight","errorFileSize","errorFileExtension","autoFocus","FindPage","getInfoPet","getPetInfo","findId","call","infoPet","handleFind","columnsInfo","ListPage","list","photo","flat","e","makeListPets","owner","balanceOf","count","i","tokenOfOwnerByIndex","totalSupply","tokens","token","urlPhoto","narrow","cascade","btn","fixed","columns","rows","ChangePage","NotFoundPage","Header","domElement","placement","borderStyle","borderWidth","borderColor","balance","fontWeight","Footer","backgroundColor","Date","getFullYear","Title","document","title","version","CallPage","handleData","alert","_address","ListTestPage","match","App","loadBlockchainData","ipfsClient","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Token","networks","instance","Contract","abi","address","utils","getBalance","fromWei","basename","exact","component","big","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a2915bff.chunk.js","sourcesContent":["import {Component} from \"react\";\n\nexport class BasePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: props.web3, account: props.account, contract: props.contract, ipfs: props.ipfs};\n    }\n}\n","import React, {Fragment} from 'react';\nimport {BasePage} from './base';\nimport {useHistory} from \"react-router-dom\";\nimport {MDBBtn, MDBCard, MDBLink, MDBCardBody, MDBCardImage, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\n\nfunction CardMenu(props) {\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(props.url);\n    }\n\n    return (\n        <MDBCard>\n            <MDBLink to='#' onClick={handleClick} link>\n                <MDBCardImage\n                    top\n                    src={props.image}\n                    overlay='white-slight'\n                    hover\n                    alt='MDBCard image cap'\n                />\n            </MDBLink>\n            <MDBCardBody>\n                <div className={\"text-center\"}>\n                    <MDBBtn color=\"primary\" onClick={handleClick} outline>{props.action}</MDBBtn>\n                </div>\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\nclass MainPage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <MDBContainer className={\"my-4\"}>\n                    <MDBRow center>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Register a pet\"} image={\"assets/m1.jpeg\"} url={\"/create\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"List of pets\"} image={\"assets/m3.jpg\"} url={\"/list\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center className={\"mt-4\"}>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Find a pet\"} image={\"assets/find-pet.jpg\"} url={\"/find\"}/>\n                        </MDBCol>\n                        <MDBCol sm=\"4\">\n                            <CardMenu action={\"Change the owner\"} image={\"assets/m4.jpg\"} url={\"/change\"}/>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport {MDBBtn, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader, MDBRow, MDBSpinner} from 'mdbreact';\n\nconst ValidationPopup = (props) => {\n    const birthdate = props.data.birthdate_pet !== null ? props.data.birthdate_pet.toLocaleString().substring(1, 10) : null;\n    return (\n        <MDBContainer>\n            <MDBModal size=\"lg\" isOpen={props.isOpen}>\n                <MDBModalHeader toggle={props.isOpen}>Waiting for registering your pet</MDBModalHeader>\n                <MDBModalBody>\n                    <MDBContainer fluid>\n                        <MDBRow>\n                            <MDBCol md=\"1\">\n                                <img\n                                    src={\"https://ipfs.io/ipfs/\".concat(props.data.photo_hash)} //https://ipfs.io/ipfs/QmRTGppwz2kRBB6vwfnmpYcATNWPgCZH6wrbbU1ruFjiQT\n                                    alt={\"ipfs data store\"}\n                                    style={{width: \"7em\"}}/>\n                            </MDBCol>\n                            <MDBCol md=\"8\" className=\"ml-auto\">\n                                <p className=\"py-0 my-1\">Name: <strong>{props.data.name_pet}</strong></p>\n                                <p className=\"py-0  my-1\">Type: <strong>{props.data.type_pet}</strong></p>\n                                <p className=\"py-0  my-1\">Birthdate :<strong>{birthdate}</strong></p>\n                                <p className=\"py-0  my-1\">Color: <strong>{props.data.color_pet}</strong></p>\n\n                            </MDBCol>\n                        </MDBRow>\n                        <MDBRow>\n                            <MDBCol md=\"12\">\n                                {props.transactionInfo.id === null\n                                    ? <div className=\"text-center my-3\"><MDBSpinner multicolor/></div>\n                                    : <MDBContainer fluid>\n                                        <div className=\"text-left my-3 p-3 m-3\" style={{fontSize: \"0.85em\", border: \"solid 1px grey\"}}>\n                                            <p className=\"py-0 my-1\">Transaction hash: <a target=\"_blank\" rel=\"noopener noreferrer\"\n                                                                                          href={'https://goerli.etherscan.io/tx/' + props.transactionInfo.transactionHash}><strong>{props.transactionInfo.transactionHash}</strong></a>\n                                            </p>\n                                            <p className=\"py-0  my-1\">Block number: <strong>{props.transactionInfo.blockNumber}</strong></p>\n                                            <p className=\"py-0  my-1\">Token ID :<strong>{props.transactionInfo.id}</strong></p>\n                                        </div>\n                                    </MDBContainer>\n                                }\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </MDBModalBody>\n                {props.transactionInfo.id !== null &&\n                <MDBModalFooter>\n                    < MDBBtn outline color=\"success\" onClick={props.closeModal}>Close</MDBBtn>\n                </MDBModalFooter>\n                }\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\nexport const PhotoPopup = (props) => {\n    console.log(props);\n    return (\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen} side position=\"top-right\">\n                <MDBModalHeader toggle={props.isOpen}>{props.name}</MDBModalHeader>\n                <MDBModalBody>\n                    <div className=\"text-center\">\n                        <img\n                            src={\"https://ipfs.io/ipfs/\".concat(props.photo_hash)} //https://ipfs.io/ipfs/QmRTGppwz2kRBB6vwfnmpYcATNWPgCZH6wrbbU1ruFjiQT\n                            alt={\"ipfs data store\"}\n                            style={{width: \"22em\"}}/>\n                    </div>\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBContainer className=\"text-center\">\n                        <MDBBtn outline color=\"success\" onClick={props.closeModal}>Close</MDBBtn>\n                    </MDBContainer>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\n\nexport default ValidationPopup;","import validator from \"validator\";\n\nexport const validationData = (rules, data) => {\n    let errors = [];\n    Object.keys(data).forEach(field => {\n        if (rules.hasOwnProperty(field)) {\n            let value = data[field];\n            if (rules[field].required) {\n                switch (rules[field].type) {\n                    case 'email':\n                        if (value === null || !validator.isEmail(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                        break;\n                    case 'date':\n                        if (value === null || !validator.isDate(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                        break;\n                    case 'boolean':\n                        if (typeof value === 'boolean') {\n                            if (!value) {\n                                errors.push(rules[field].msg);\n                            }\n                        }\n                        if (typeof value === 'string') {\n                            if (value === 'false') {\n                                errors.push(rules[field].msg);\n                            }\n                        }\n                        break\n                    default:\n                        if (value === null || validator.isEmpty(value)) {\n                            errors.push(rules[field].msg);\n                        }\n                }\n            }\n        }\n    });\n    return errors;\n}\n","import {MDBAlert, MDBCol, MDBContainer, MDBIcon, MDBRow, MDBTypography} from \"mdbreact\";\nimport React from \"react\";\n\nconst ErrorMessage = (props) => {\n    const errors = props.errors;\n    return (\n        <div>\n            {errors.length > 0 &&\n            <MDBContainer className=\"mt-4\">\n                <MDBAlert color=\"danger\">\n                    <MDBTypography tag='h6' variant=\"h6\">Submitting failed - {errors.length} field(s) must be corrected</MDBTypography>\n                    {\n                        errors.map((field) =>\n                            <MDBRow>\n                                <MDBCol size=\"1\" className=\"ml-3\">\n                                    <MDBIcon icon=\"exclamation-triangle\" className=\"red-text\"/>\n                                </MDBCol>\n                                <MDBCol xl=\"10\" size=\"11\">\n                                    <p className=\"red-text\">{field}. Please complete this field</p>\n                                </MDBCol>\n                            </MDBRow>\n                        )\n                    }\n                </MDBAlert>\n            </MDBContainer>\n            }\n        </div>\n    );\n}\n\n\nexport default ErrorMessage;","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\nimport {Redirect} from 'react-router'\nimport {\n    MDBBtn,\n    MDBCol,\n    MDBContainer,\n    MDBDatePicker,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBSelect,\n    MDBSelectInput,\n    MDBSelectOption,\n    MDBSelectOptions\n} from \"mdbreact\";\nimport MDBFileupload from \"mdb-react-fileupload\";\nimport ValidationPopup from '../components/modal';\nimport {validationData} from \"../utils/validation\";\nimport ErrorMessage from \"../components/errors\";\nimport dateFormat from 'dateformat'\n\nclass CreatePage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            redirect: false,\n            openModal: false,\n            errors: [],\n            transactionInfo : {\n                transactionHash: null,\n                blockNumber: null,\n                id: null\n            },\n            firstname: null,\n            lastname: null,\n            email: null,\n            petname: null,\n            petcolor: null,\n            pettype: null,\n            petbirthdate: null,\n            photo_hash: null,\n            terms: 'false'\n        }\n\n        this.rules = {\n            firstname: {required: true, type: 'string', msg: 'your firstname is required'},\n            lastname: {required: true, type: 'string', msg: 'your lastname is required'},\n            email: {required: true, type: 'email', msg: 'your email is required or is not valid'},\n            petname: {required: true, type: 'string', msg: 'Name of your pet is required'},\n            petcolor: {required: true, type: 'string', msg: 'Color of your pet is required'},\n            pettype: {required: true, type: 'string', msg: 'Kind of your pet is required'},\n            petbirthdate: {required: true, type: 'date', msg: 'Birthdate of your pet is required'},\n            photo_hash: {required: true, type: 'string', msg: 'Photo of your pet is required'},\n            terms: {required: true, type: 'boolean', msg: 'Terms must be accepted'}\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePetBirthdate = this.handlePetBirthdate.bind(this);\n        this.handleSelectPetType = this.handleSelectPetType.bind(this);\n        this.handlePhotoChange = this.handlePhotoChange.bind(this);\n        this.handleTerms = this.handleTerms.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const errors = validationData(this.rules, this.state);\n\n        this.setState({errors: errors});\n        this.setState({openModal: errors.length === 0 ? true : false});\n        if (errors.length === 0) {\n            this.addToken();\n        }\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    InfoPet()  {\n        return {\n            first_name: this.state.firstname,\n            last_name: this.state.lastname,\n            email: this.state.email,\n            name_pet: this.state.petname,\n            type_pet: this.state.pettype,\n            color_pet: this.state.petcolor,\n            birthdate_pet: dateFormat(this.state.petbirthdate, \"dd/mm/yyyy\"),\n            photo_hash: this.state.photo_hash\n        }\n    }\n\n    addToken = async () => {\n        let self = this;\n        const {account, contract} = this.state;\n\n        contract.methods.addPet(account, this.InfoPet()).send({from: account})\n            .on('receipt', function (receipt) {\n                self.setState({tokenId: receipt.events.AddToken.returnValues.id});\n                const transactionInfo = {\n                    transactionHash: receipt.events.AddToken.transactionHash,\n                    blockNumber:receipt.events.AddToken.blockNumber,\n                    id: receipt.events.AddToken.returnValues.id\n                }\n                self.setState({transactionInfo: transactionInfo});\n            });\n    };\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSelectPetType = (value) => {\n        this.setState({pettype: value[0]});\n    }\n\n    handlePetBirthdate = (value) => {\n        this.setState({petbirthdate: value});\n    }\n\n    handleTerms = (value) => {\n        this.setState({terms: value});\n    }\n\n    handlePhotoChange = (file) => {\n        this.saveToIpfsWithFilename(file);\n    }\n\n    async saveToIpfsWithFilename(file) {\n        try {\n            const fileDetails = {path: file.name, content: file, added_file_hash: null}\n            const added = await this.state.ipfs.add(fileDetails);\n            this.setState({photo_hash: added.cid.toString()});\n            console.log(added.cid.toString());\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    calculateAutofocus = (a) => {\n        if (this.state['formActivePanel' + a + 'Changed']) {\n            return true\n        }\n    }\n\n    closeModal = () => {\n        this.setState({openModal: false});\n        this.setState({redirect: true});\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n\n        return (\n            <Fragment>\n                <ValidationPopup isOpen={this.state.openModal} closeModal={this.closeModal} data={this.InfoPet()} transactionInfo={this.state.transactionInfo}/>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon far icon=\"edit\"/> Create an ID for\n                        your pet</h2>\n                    <form className=\"needs-validation\">\n                        <div className=\"indigo-text\">\n                            <h4 className=\"font-weight-bold grey-text\"><MDBIcon icon=\"user\"/> Some information about You\n                            </h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"firstname\" onChange={this.handleChange} value={this.state.firstname}\n                                              label=\"Your firstname\" icon=\"user-edit\"\n                                              type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"lastname\" onChange={this.handleChange} value={this.state.lastname}\n                                              label=\"Your lastname\" icon=\"user-edit\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"email\" onChange={this.handleChange} value={this.state.email}\n                                              label=\"Your email\" icon=\"envelope\" group type=\"email\"/>\n                                </div>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"paw\"/> Information of your\n                                well loved pet</h4>\n                            <div className=\"px-4\">\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petname\" onChange={this.handleChange} value={this.state.petname}\n                                              label=\"Name\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <div className={\"create-div\"}>\n                                    <MDBInput name=\"petcolor\" onChange={this.handleChange} value={this.state.petcolor}\n                                              label=\"Color\" icon=\"paw\" group type=\"text\"/>\n                                </div>\n                                <MDBContainer>\n                                    <MDBRow middle>\n                                        <MDBCol sm=\"8\">\n                                            <div className={\"create-div\"}>\n                                                <MDBSelect label='Kind of pet' getValue={this.handleSelectPetType}>\n                                                    <MDBSelectInput selected=\"aaa\"/>\n                                                    <MDBSelectOptions>\n                                                        <MDBSelectOption disabled>Kind of your pet</MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'cat'}\n                                                                         value='cat' icon='assets/select-cat.jpg'>\n                                                            Cat\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'dog'}\n                                                                         value='dog' icon='assets/select-dog.jpg'>\n                                                            Dog\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'rabbit'}\n                                                                         value='rabbit' icon='assets/select-rabbit.jpg'>\n                                                            Rabbit\n                                                        </MDBSelectOption>\n                                                        <MDBSelectOption selected={this.state.pettype === 'bird'}\n                                                                         value='bird' icon='assets/select-bird.jpg'>\n                                                            Bird\n                                                        </MDBSelectOption>\n                                                    </MDBSelectOptions>\n                                                </MDBSelect>\n                                            </div>\n                                        </MDBCol>\n                                        <MDBCol sm=\"4\">\n                                            <div className={\"create-div text-center\"}>\n                                                <MDBDatePicker valueDefault={null} emptyLabel=\"Birthdate of your pet\"\n                                                               value={this.state.petbirthdate}\n                                                               getValue={this.handlePetBirthdate}/>\n                                            </div>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </MDBContainer>\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 mb-3 grey-text\"><MDBIcon icon=\"camera\"/> Add a Photo of\n                                your pet</h4>\n                            <div className={\"px-4\"}>\n                                <MDBFileupload\n                                    getValue={this.handlePhotoChange}\n                                    ref={fileupload => this.fileupload = fileupload}\n                                    maxFileSize=\"1M\"\n                                    allowedFileExtensions={['jpg', 'png', 'bmp']}\n                                    containerHeight={600}\n                                    maxHeight={1500}\n                                    errorMaxHeight=\"Your photo must not have more than 500 pixels height\"\n                                    errorFileSize=\"The size of your photo is too big\"\n                                    errorFileExtension=\"The type of your photo is not allowed\"\n                                />\n                            </div>\n                            <h4 className=\"font-weight-bold mt-5 grey-text\"><MDBIcon icon=\"check\"/> Registration\n                                completed!</h4>\n                            <div className=\"px-4\">\n                                <p className=\"font-weight-bold mt-3 mb-1\"><strong>Terms and conditions</strong></p>\n                                <MDBInput name=\"terms\" getValue={this.handleTerms}\n                                          label=\"I agreee to the terms and conditions\" type=\"checkbox\" id=\"checkbox\"\n                                          autoFocus={this.calculateAutofocus(1)}/>\n                                <MDBInput label=\"I want to receive newsletter\" type=\"checkbox\" id=\"checkbox2\"/>\n                                <div className=\"text-right mt-2\">\n                                    <MDBBtn outline color=\"grey\" onClick={this.handleClose}>cancel</MDBBtn>\n                                    <MDBBtn outline color=\"success\" onClick={this.handleSubmit}>submit</MDBBtn>\n                                </div>\n                            </div>\n                            <ErrorMessage errors={this.state.errors}/>\n                        </div>\n                    </form>\n                </MDBContainer>\n            </Fragment>\n        )\n    }\n}\n\nexport default CreatePage;","import React, {Fragment} from \"react\";\nimport {Redirect} from 'react-router'\nimport {MDBBtn, MDBCol, MDBContainer, MDBIcon, MDBInput, MDBRow, MDBView} from 'mdbreact';\nimport {BasePage} from './base';\nimport {validationData} from \"../utils/validation\";\nimport ErrorMessage from \"../components/errors\";\nimport dateFormat from \"dateformat\";\n\n\nclass FindPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            errors: [],\n            findId: null,\n            infoPet: null,\n            redirect: false\n        }\n\n        this.rules = {\n            findId: {required: true, type: 'string', msg: 'unique ID is required'}\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleFind = this.handleFind.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    handleFind(event) {\n        event.preventDefault();\n        this.setState({infoPet: null});\n        const errors = validationData(this.rules, this.state);\n        this.setState({errors: errors});\n        if (errors.length === 0) {\n            this.getInfoPet();\n        }\n    }\n\n    getInfoPet = async () => {\n        try {\n            const infoPet = await this.state.contract.methods.getPetInfo(this.state.account, this.state.findId).call({from: this.state.account});\n            this.setState({infoPet: infoPet});\n        } catch (err) {\n            let errors = [\"Failed to get data\"];\n            this.setState({errors: errors});\n        }\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-2\"><MDBIcon icon=\"search\"/> Find a pet</h2>\n                    <MDBRow center>\n                        <MDBCol sm=\"6\">\n                            <div className=\"indigo-text create-div\">\n                                <MDBInput name=\"findId\" onChange={this.handleChange} value={this.state.findId} label=\"Type a valid ID\" icon=\"user-edit\" group type=\"text\"/>\n                            </div>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center>\n                        <MDBCol sm=\"6\" className=\"text-right\">\n                            <MDBBtn outline color=\"success\" onClick={this.handleFind}>Find</MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow center>\n                        <MDBCol sm=\"12\" className=\"text-left\">\n                            <ErrorMessage errors={this.state.errors}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                        <MDBCol sm=\"12\" className=\"mt-5\">\n                            {this.state.infoPet !== null &&\n                            <MDBContainer>\n                                <MDBRow>\n                                    <MDBCol sm=\"4\">\n                                        <div className=\"text-center\">\n                                            <img src={\"https://ipfs.io/ipfs/\".concat(this.state.infoPet.photo_hash)} style={{width: \"200px\"}} alt=\"\" className=\"img-fluid\"/>\n                                        </div>\n                                    </MDBCol>\n                                    <MDBCol sm=\"8\">\n                                        <h5 className=\"indigo-text\"><MDBIcon icon=\"user\"/> You</h5>\n                                        <MDBRow className=\"ml-2\">\n                                            <MDBCol sm=\"2\">\n                                                <span className=\"grey-text\">name:</span>\n                                            </MDBCol>\n                                            <MDBCol sm=\"10\">\n                                                <strong>{this.state.infoPet.first_name} {this.state.infoPet.last_name}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow className=\"ml-2\">\n                                            <MDBCol sm=\"2\">\n                                                <span className=\"grey-text\">email:</span>\n                                            </MDBCol>\n                                            <MDBCol sm=\"10\">\n                                                <strong>{this.state.infoPet.email}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <h5 className=\"indigo-text mt-4\"><MDBIcon icon=\"cat\"/> Your lovely pet</h5>\n                                        <MDBRow className=\"ml-2\">\n                                            <MDBCol sm=\"2\">\n                                                <span className=\"grey-text\">kind of pet:</span>\n                                            </MDBCol>\n                                            <MDBCol sm=\"10\">\n                                                <strong>{this.state.infoPet.type_pet}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow className=\"ml-2\">\n                                            <MDBCol sm=\"2\">\n                                                <span className=\"grey-text\">Birthdate:</span>\n                                            </MDBCol>\n                                            <MDBCol sm=\"10\">\n                                                <strong>{this.state.infoPet.birthdate_pet}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow className=\"ml-2\">\n                                            <MDBCol sm=\"2\">\n                                                <span className=\"grey-text\">Color:</span>\n                                            </MDBCol>\n                                            <MDBCol sm=\"10\">\n                                                <strong>{this.state.infoPet.color_pet}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                    </MDBCol>\n                                </MDBRow>\n                            </MDBContainer>\n                            }\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                        <MDBCol sm=\"12\" className=\"mt-4 text-right\">\n                            <MDBBtn outline color=\"grey\" onClick={this.handleClose}>Back to the menu</MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default FindPage;\n","import React, {Fragment} from \"react\";\nimport {Redirect} from 'react-router'\nimport {BasePage} from './base';\nimport {MDBBtn, MDBCard, MDBCardBody, MDBCardHeader, MDBContainer, MDBIcon, MDBTable, MDBTableBody, MDBTableHead} from 'mdbreact';\nimport {PhotoPopup} from '../components/modal';\n\nconst columnsInfo = [\n    {\n        'label': 'Unique ID',\n        'field': 'id',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Pet\\'name',\n        'field': 'name',\n        'sort': 'asc'\n    },\n    {\n        'label': 'kind of pet',\n        'field': 'type',\n        'sort': 'asc'\n    },\n    {\n        'label': 'color',\n        'field': 'color',\n        'sort': 'asc'\n    },\n    {\n        'label': 'Photo',\n        'field': 'photo',\n        'sort': 'asc'\n    }\n];\n\n\nclass ListPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            redirect: false,\n            openModal: false,\n            photo_hash: null,\n            name: null,\n            list: []\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    componentDidMount() {\n        this.makeListPets();\n    }\n\n    handleClose(event) {\n        this.setState({redirect: true});\n    }\n\n    getInfoPet = async (list, tokenId, contract, account) => {\n        const data = await contract.methods.getPetInfo(account, tokenId).call({from: account});\n        list.push({\n            id: tokenId,\n            name: data.name_pet,\n            type: data.type_pet,\n            color: data.color_pet,\n            photo: <MDBBtn flat onClick={(e) => this.openModal(data.photo_hash, data.name_pet, e)}><img src={\"https://ipfs.io/ipfs/\".concat(data.photo_hash)} width=\"40px\"\n                                                                                                        alt={data.name_pet}/></MDBBtn>\n        });\n    }\n\n    makeListPets = async () => {\n        const contract = this.state.contract;\n        const owner = await contract.methods.owner().call();\n        const account = this.state.account;\n        let list = [];\n\n        if (owner !== this.state.account) {\n            const count = await contract.methods.balanceOf(account).call({from: account});\n            for (let i = 0; i < count; i++) {\n                const tokenId = await contract.methods.tokenOfOwnerByIndex(account, i).call({from: account});\n                await this.getInfoPet(list, tokenId, contract, account);\n            }\n        } else {\n            const tokens = await contract.methods.totalSupply().call({from: account});\n            for (let token = 1; token <= tokens; token++) {\n                await this.getInfoPet(list, token, contract, account);\n            }\n        }\n        this.setState({list: list});\n    }\n\n    closeModal = (event) => {\n        this.setState({openModal: false});\n    }\n\n    openModal = (urlPhoto, name, e) => {\n        this.setState({openModal: true, photo_hash: urlPhoto, name: name});\n    }\n\n    render() {\n        if (this.state.redirect === true) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <Fragment>\n                <MDBContainer>\n                    <PhotoPopup isOpen={this.state.openModal} photo_hash={this.state.photo_hash} name={this.state.name} closeModal={this.closeModal}/>\n                    <h2 className=\"indigo-text font-weight-bold mt-2 mb-5\"><MDBIcon icon=\"list\"/> List of pets</h2>\n                    <MDBCard narrow>\n                        <MDBCardHeader className=\"view view-cascade gradient-card-header blue-gradient d-flex align-items-center py-3 mx-4 mb-1\">\n                            Pets for {this.state.account}\n                        </MDBCardHeader>\n                        <MDBCardBody cascade>\n                            {this.state.list.length === 0 &&\n                            <div className={\"text-center grey-text align-middle p-1\"}>\n                                <p style={{fontSize: \"0.90em\"}}>No pets already registered</p>\n                            </div>\n                            }\n                            {this.state.list.length > 0 &&\n                            <MDBTable btn fixed>\n                                <MDBTableHead columns={columnsInfo}/>\n                                <MDBTableBody rows={this.state.list}/>\n                            </MDBTable>\n                            }\n                        </MDBCardBody>\n                    </MDBCard>\n                    <div className=\"text-right mt-2\">\n                        <MDBBtn outline color=\"grey\" onClick={this.handleClose}>Back to the menu</MDBBtn>\n                    </div>\n                </MDBContainer>\n            </Fragment>\n        );\n    }\n}\n\nexport default ListPage;\n","import React, {Fragment} from \"react\";\nimport {BasePage} from './base';\n\nclass ChangePage extends BasePage {\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Change owner</h1>\n                <p>{this.state.account}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default ChangePage;","import React, {Component, Fragment} from 'react';\n\nclass NotFoundPage extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>404 page not found</h1>\n            </Fragment>\n        );\n    }\n}\n\nexport default NotFoundPage;","import React from 'react';\nimport {MDBCol, MDBContainer, MDBRow, MDBTooltip} from \"mdbreact\";\n\nconst Header = (props) => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"4\">\n                    <a href={\"/\"}><img src=\"assets/pets.png\" className=\"pt-2\" alt=\"logo\" style={{width: '100%'}}/></a>\n                    <MDBTooltip domElement tag=\"p\"  placement=\"bottom\">\n                        <p className={\"text-center indigo-text align-middle p-1\"}\n                           style={{fontSize: \"0.80em\", borderStyle: \"solid\", borderWidth: \"thin\", borderColor: \"#bdbdbd\"}}>\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://goerli.etherscan.io/address/' + props.account}> <img src=\"assets/etherscan.png\"\n                                                                                                                                             alt=\"etherscan\"\n                                                                                                                                             style={{width: '16px'}}/> {props.account}\n                            </a>\n                        </p>\n                        <span>Balance: <b>{props.balance}</b> ether</span>\n                    </MDBTooltip>\n                </MDBCol>\n                <MDBCol md=\"8\">\n                    <h2 className=\"indigo-text text-center\" style={{fontSize: \"4em\", fontWeight: \"bolder\"}}>ID-PET  D-APPLICATION</h2>\n                    <p className=\"lead text-justify grey-text mt-4\">This is a simple example of a decentralized\n                        application based on unique non-fungible tokens on the Ethereum ERC721 blockchain.\n                        Its main goal is to identify pets on the Ethereum blockchain.\n                    </p>\n                </MDBCol>\n            </MDBRow>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <hr className=\"my-2\"/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport {MDBCol, MDBContainer, MDBFooter, MDBRow, MDBIcon} from \"mdbreact\";\n\nconst Footer = () => {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol md=\"12\">\n                    <MDBFooter color=\"mdb-color darken-3\" className=\"font-small pt-3 mt-5\">\n                        <MDBContainer fluid className=\"text-center text-md-left\">\n                            <MDBRow>\n                                <MDBCol md=\"8\">\n                                    <h5 className=\"title\"><MDBIcon icon=\"paw\" /> Decentralized Application</h5>\n                                    <hr className=\"my-1\" style={{color:\"white\",backgroundColor:\"white\"}}/>\n                                    <p className={\"text-justify\"} style={{color: \"rgba(255,255,255,0.6)\"}}>\n                                        A decentralized application is a computer application that runs on a distributed computing system. DApps have been popularized by distributed ledger technologies (DLT) such as the Ethereum Blockchain, where DApps are often referred to as smart contracts.\n                                    </p>\n                                </MDBCol>\n                                <MDBCol md=\"4\" className={\"text-center\"}>\n                                    <img src=\"assets/pets.png\" className=\"pt-1\" alt=\"logo\" style={{width: '80%'}}/>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                        <div className=\"footer-copyright text-center py-2\">\n                            <MDBContainer fluid>\n                                &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.mdbootstrap.com\"> Denis LAMARD </a>\n                            </MDBContainer>\n                        </div>\n                    </MDBFooter>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default Footer;","import {Component} from 'react'\n\nexport class Title extends Component {\n\n    componentDidMount() {\n        document.title = this.props.name + ' version ' + this.props.version;\n    }\n\n    render() {\n        return null;\n    }\n}","import React from 'react';\nimport {MDBContainer, MDBBtn, MDBIcon, MDBInput, MDBBadge} from \"mdbreact\";\nimport Token from \"../contracts/Token.json\";\nimport {BasePage} from \"./base\";\n\nclass CallPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            tokenId: null\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /*\n    listenAddToken = () => {\n    /*\n    listenAddToken = () => {\n        let self = this;\n        this.state.contract.events.AddToken().on(\"data\", async function (evt) {\n\n            if (evt.transactionHash !== self.state.transactionHash) {\n                console.log(\"Token ID=\", evt.returnValues.id);\n                self.setState({transactionHash: evt.transactionHash, tokenId: evt.returnValues.id});\n            }\n        });\n    }\n    */\n\n/*\n{\n    \"logIndex\": 1,\n    \"transactionIndex\": 0,\n    \"transactionHash\": \"0x92bc599773932f68a181db0b9c676f9188d711bf59c7ef6020f8f2e19c7e6b42\",\n    \"blockHash\": \"0x2d68a6bef01df08f051c9e1127b5a03c61e090d37c12d081e1cd6497910b1b26\",\n    \"blockNumber\": 148,\n    \"address\": \"0x27454DF0ef43C1825c2F597Ee6BfA4017DCFe329\",\n    \"type\": \"mined\",\n    \"id\": \"log_89df59b8\",\n    \"returnValues\": {\n        \"0\": \"41\",\n        \"id\": \"41\"\n    },\n    \"event\": \"AddToken\",\n    \"signature\": \"0x5bcb5fd4c92947f8a19c711dc5582f060ea564bec47e46cf4332095c3788cdac\",\n    \"raw\": {\n        \"data\": \"0x\",\n        \"topics\": [\n            \"0x5bcb5fd4c92947f8a19c711dc5582f060ea564bec47e46cf4332095c3788cdac\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000029\"\n        ]\n    }\n}\n\n */\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        let self = this;\n        const {account, contract} = this.state;\n\n        console.log(this.state);\n\n        const data = {\n            first_name: \"Denis\",\n            last_name: \"sdkljsdfj\",\n            email: \"sdkljsdfj\",\n            name_pet: \"sdkljsdfj\",\n            type_pet: \"sdkljsdfj\",\n            color_pet: \"dsfdsfkj\",\n            birthdate_pet: \"sdkljsdfj\",\n            photo_hash: \"sdkljsdfj\"\n        }\n\n\n\n        contract.methods.addPet(account, data).send({from: account})\n            .on('receipt', function (receipt) {\n                self.setState({tokenId: receipt.events.AddToken.returnValues.id});\n                const data = {\n                    transactionHash: receipt.events.AddToken.transactionHash,\n                    blockNumber:receipt.events.AddToken.blockNumber,\n                    id: receipt.events.AddToken.returnValues.id\n                }\n                console.log(receipt); //.events.AddToken); //transactionHash\n            });\n    };\n\n    handleData = async (event) => {\n        event.preventDefault();\n        let self = this;\n        const {account, contract} = this.state;\n\n        const data =  await contract.methods.getPetInfo(account, 1).call({from: account});\n        console.log(data);\n        alert(data.photo_hash);\n    }\n\n    render() {\n        return (\n            <MDBContainer>\n                <p>{this.state.contract._address}</p>\n                <MDBBtn onClick={this.handleSubmit}>call</MDBBtn>\n                <MDBBtn onClick={this.handleData}>data</MDBBtn>\n                <div>\n                    {this.state.tokenId > 0 &&\n                        <MDBBadge color=\"success\">Token Id = {this.state.tokenId}</MDBBadge>\n                    }\n                </div>\n            </MDBContainer>\n        );\n    }\n\n}\n\nexport default CallPage;","import React from 'react';\nimport {MDBContainer, MDBBtn, MDBIcon, MDBInput, MDBBadge} from \"mdbreact\";\nimport Token from \"../contracts/Token.json\";\nimport {BasePage} from \"./base\";\n\nclass ListTestPage extends BasePage {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state\n        }\n        //console.log(props);\n        //this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n\n    render() {\n        console.log(this.props.match);\n        console.log(this.state);\n        return (\n            <MDBContainer>\n                <p>{this.state.tokenId}</p>\n            </MDBContainer>\n        );\n    }\n\n}\n\nexport default ListTestPage;","import React, {Component, Fragment} from 'react';\nimport {BrowserRouter as Router, Route, Switch, HashRouter} from \"react-router-dom\";\n\nimport MainPage from \"./pages/main\";\nimport CreatePage from \"./pages/create\";\nimport FindPage from \"./pages/find\";\nimport ListPage from \"./pages/list\";\nimport ChangePage from \"./pages/change\";\nimport NotFoundPage from \"./pages/404\";\nimport Header from './components/header';\nimport Footer from \"./components/footer\";\nimport {Title} from \"./components/title\";\n\nimport CallPage from \"./pages/test-call\";\nimport ListTestPage from \"./pages/test-list\";\n\nimport {getWeb3} from \"./utils/web3\";\nimport './App.css';\nimport {MDBCol, MDBContainer, MDBRow, MDBSpinner} from \"mdbreact\";\nimport ipfsClient from \"ipfs-http-client\";\nimport Token from \"./contracts/Token.json\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {web3: null, account: null, ipfs: null};\n    }\n\n    componentWillMount() {\n        this.loadBlockchainData()\n    }\n\n    async loadBlockchainData() {\n        const ipfs = await ipfsClient('https://ipfs.infura.io:5001/api/v0/');\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Token.networks[networkId];\n        const instance = new web3.eth.Contract(Token.abi, deployedNetwork && deployedNetwork.address);\n\n        this.setState({\n            web3: web3,\n            account: accounts[0],\n            balance: web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether'),\n            contract: instance,\n            ipfs: ipfs\n        });\n    }\n\n    render() {\n        if (!this.state.web3) {\n            return (\n                <Fragment>\n                    <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                    <Header account={\"not available yet\"}/>\n                    <MDBContainer className={\"mt-5\"}>\n                        <MDBRow center>\n                            <MDBCol md=\"4\" className={\"text-center\"}>\n                                <img src=\"assets/metamask.png\" style={{width: '50%'}} alt={\"Metamask\"}/>\n                            </MDBCol>\n                            <MDBCol md=\"6\" className={\"text-center\"}>\n                                <h3>Loading data from Metamask...</h3>\n                                <MDBSpinner className={\"mt-4\"} big/>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </Fragment>\n            );\n        }\n        return (\n            <Fragment>\n                <Title name={\"PetID\"} version={\"1.0.0\"}/>\n                <Header account={this.state.account} balance={this.state.balance}/>\n                <HashRouter basename=\"/\">\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <MainPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/create\" exact>\n                            <CreatePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/find\" exact>\n                            <FindPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/list\" exact>\n                            <ListPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/change\" exact>\n                            <ChangePage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/test\" exact>\n                            <CallPage web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}/>\n                        </Route>\n                        <Route path=\"/testlist/:id\" component={ListTestPage}\n                               web3={this.state.web3} account={this.state.account} contract={this.state.contract} ipfs={this.state.ipfs}\n                        />\n\n                        <Route path=\"*\" component={NotFoundPage}/>\n                    </Switch>\n                </HashRouter>\n                <Footer/>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}